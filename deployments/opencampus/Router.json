{
  "address": "0xB74d9ea6C7764FB7f98aB993A201feD812aF19b6",
  "abi": [
    {
      "inputs": [],
      "name": "CreatePairUnauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Expired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IdenticalAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InSufficientAAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InSufficientBAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "InSufficientOutputAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "InvalidPath",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PairExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "PairNotListed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "referrerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "referralId",
          "type": "uint256"
        }
      ],
      "name": "ReferralAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "userId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "referrerId",
          "type": "uint256"
        }
      ],
      "name": "UserRegistered",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            }
          ],
          "internalType": "struct TokenPayment",
          "name": "paymentA",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            }
          ],
          "internalType": "struct TokenPayment",
          "name": "paymentB",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            }
          ],
          "internalType": "struct TokenPayment",
          "name": "paymentA",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            }
          ],
          "internalType": "struct TokenPayment",
          "name": "paymentB",
          "type": "tuple"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pairAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGovernance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPairsBeacon",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getReferrals",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "referralAddress",
              "type": "address"
            }
          ],
          "internalType": "struct ReferralInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUserId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "userId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWrappedNativeToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairs",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "referrerId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "swapData",
          "type": "bytes"
        }
      ],
      "name": "registerAndSwap",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gainzToken",
          "type": "address"
        }
      ],
      "name": "runInit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "name": "setFeeToSetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setPriceOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalUsers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "userIdToAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "numDeployments": 15,
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CreatePairUnauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Expired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IdenticalAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InSufficientAAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InSufficientBAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InSufficientOutputAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"InvalidPath\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PairExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"PairNotListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referralId\",\"type\":\"uint256\"}],\"name\":\"ReferralAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"}],\"name\":\"UserRegistered\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenPayment\",\"name\":\"paymentA\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenPayment\",\"name\":\"paymentB\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenPayment\",\"name\":\"paymentA\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenPayment\",\"name\":\"paymentB\",\"type\":\"tuple\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPairsBeacon\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getReferrals\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referralAddress\",\"type\":\"address\"}],\"internalType\":\"struct ReferralInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWrappedNativeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"}],\"name\":\"registerAndSwap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gainzToken\",\"type\":\"address\"}],\"name\":\"runInit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"userIdToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"getUserId(address)\":{\"params\":{\"userAddress\":\"The address of the user.\"},\"returns\":{\"userId\":\"The ID of the user.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getUserId(address)\":{\"notice\":\"Gets the user ID for a given address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Router.sol\":\"Router\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":150},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\nimport {ERC1155Utils} from \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Utils.sol\\\";\\nimport {ContextUpgradeable} from \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Arrays} from \\\"@openzeppelin/contracts/utils/Arrays.sol\\\";\\nimport {IERC1155Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n */\\nabstract contract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155, IERC1155MetadataURI, IERC1155Errors {\\n    using Arrays for uint256[];\\n    using Arrays for address[];\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC1155\\n    struct ERC1155Storage {\\n        mapping(uint256 id => mapping(address account => uint256)) _balances;\\n\\n        mapping(address account => mapping(address operator => bool)) _operatorApprovals;\\n\\n        // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n        string _uri;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC1155\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC1155StorageLocation = 0x88be536d5240c274a3b1d3a1be54482fd9caa294f08c62a7cde569f49a3c4500;\\n\\n    function _getERC1155Storage() private pure returns (ERC1155Storage storage $) {\\n        assembly {\\n            $.slot := ERC1155StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the ERC].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256 /* id */) public view virtual returns (string memory) {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        return $._uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual returns (uint256) {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        return $._balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual returns (uint256[] memory) {\\n        if (accounts.length != ids.length) {\\n            revert ERC1155InvalidArrayLength(ids.length, accounts.length);\\n        }\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts.unsafeMemoryAccess(i), ids.unsafeMemoryAccess(i));\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual returns (bool) {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        return $._operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) public virtual {\\n        address sender = _msgSender();\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert ERC1155MissingApprovalForAll(sender, from);\\n        }\\n        _safeTransferFrom(from, to, id, value, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) public virtual {\\n        address sender = _msgSender();\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert ERC1155MissingApprovalForAll(sender, from);\\n        }\\n        _safeBatchTransferFrom(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`. Will mint (or burn) if `from`\\n     * (or `to`) is the zero address.\\n     *\\n     * Emits a {TransferSingle} event if the arrays contain one element, and {TransferBatch} otherwise.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement either {IERC1155Receiver-onERC1155Received}\\n     *   or {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\\n     * - `ids` and `values` must have the same length.\\n     *\\n     * NOTE: The ERC-1155 acceptance check is not performed in this function. See {_updateWithAcceptanceCheck} instead.\\n     */\\n    function _update(address from, address to, uint256[] memory ids, uint256[] memory values) internal virtual {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        if (ids.length != values.length) {\\n            revert ERC1155InvalidArrayLength(ids.length, values.length);\\n        }\\n\\n        address operator = _msgSender();\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids.unsafeMemoryAccess(i);\\n            uint256 value = values.unsafeMemoryAccess(i);\\n\\n            if (from != address(0)) {\\n                uint256 fromBalance = $._balances[id][from];\\n                if (fromBalance < value) {\\n                    revert ERC1155InsufficientBalance(from, fromBalance, value, id);\\n                }\\n                unchecked {\\n                    // Overflow not possible: value <= fromBalance\\n                    $._balances[id][from] = fromBalance - value;\\n                }\\n            }\\n\\n            if (to != address(0)) {\\n                $._balances[id][to] += value;\\n            }\\n        }\\n\\n        if (ids.length == 1) {\\n            uint256 id = ids.unsafeMemoryAccess(0);\\n            uint256 value = values.unsafeMemoryAccess(0);\\n            emit TransferSingle(operator, from, to, id, value);\\n        } else {\\n            emit TransferBatch(operator, from, to, ids, values);\\n        }\\n    }\\n\\n    /**\\n     * @dev Version of {_update} that performs the token acceptance check by calling\\n     * {IERC1155Receiver-onERC1155Received} or {IERC1155Receiver-onERC1155BatchReceived} on the receiver address if it\\n     * contains code (eg. is a smart contract at the moment of execution).\\n     *\\n     * IMPORTANT: Overriding this function is discouraged because it poses a reentrancy risk from the receiver. So any\\n     * update to the contract state after this function would break the check-effect-interaction pattern. Consider\\n     * overriding {_update} instead.\\n     */\\n    function _updateWithAcceptanceCheck(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal virtual {\\n        _update(from, to, ids, values);\\n        if (to != address(0)) {\\n            address operator = _msgSender();\\n            if (ids.length == 1) {\\n                uint256 id = ids.unsafeMemoryAccess(0);\\n                uint256 value = values.unsafeMemoryAccess(0);\\n                ERC1155Utils.checkOnERC1155Received(operator, from, to, id, value, data);\\n            } else {\\n                ERC1155Utils.checkOnERC1155BatchReceived(operator, from, to, ids, values, data);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     * - `ids` and `values` must have the same length.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the ERC].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the values in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        $._uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens of type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 value, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens of type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\n     * - `ids` and `values` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory values) internal {\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the zero address.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        if (operator == address(0)) {\\n            revert ERC1155InvalidOperator(address(0));\\n        }\\n        $._operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Creates an array in memory with only one value for each of the elements provided.\\n     */\\n    function _asSingletonArrays(\\n        uint256 element1,\\n        uint256 element2\\n    ) private pure returns (uint256[] memory array1, uint256[] memory array2) {\\n        assembly (\\\"memory-safe\\\") {\\n            // Load the free memory pointer\\n            array1 := mload(0x40)\\n            // Set array length to 1\\n            mstore(array1, 1)\\n            // Store the single element at the next word after the length (where content starts)\\n            mstore(add(array1, 0x20), element1)\\n\\n            // Repeat for next array locating it right after the first array\\n            array2 := add(array1, 0x40)\\n            mstore(array2, 1)\\n            mstore(add(array2, 0x20), element2)\\n\\n            // Update the free memory pointer by pointing after the second array\\n            mstore(0x40, add(array2, 0x40))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3a0d63838dff3fd8b77c8c44ecf37cc39b15f26fd5269da3b690879478fa3cf3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {IERC1155Receiver} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport {Initializable} from \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Simple implementation of `IERC1155Receiver` that will allow a contract to hold ERC-1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n */\\nabstract contract ERC1155HolderUpgradeable is Initializable, ERC165Upgradeable, IERC1155Receiver {\\n    function __ERC1155Holder_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Holder_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x64c8658be9360779b99ef60db78d3172be7056e1d078fc1cabf6b693862c831c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {ContextUpgradeable} from \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {IERC20Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC-20\\n * applications.\\n */\\nabstract contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20, IERC20Metadata, IERC20Errors {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\\n    struct ERC20Storage {\\n        mapping(address account => uint256) _balances;\\n\\n        mapping(address account => mapping(address spender => uint256)) _allowances;\\n\\n        uint256 _totalSupply;\\n\\n        string _name;\\n        string _symbol;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC20\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\\n\\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\\n        assembly {\\n            $.slot := ERC20StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        $._name = name_;\\n        $._symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            $._totalSupply += value;\\n        } else {\\n            uint256 fromBalance = $._balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                $._balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                $._totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                $._balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     *\\n     * ```solidity\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        $._allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbb96dc9c468170c3224126e953de917e06332ec5909a3d85e6e5bb0df10c5139\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xc8ed8d2056934b7675b695dec032f2920c2f5c6cf33a17ca85650940675323ab\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0xb25a4f11fa80c702bf5cd85adec90e6f6f507f32f4a8e6f5dbc31e8c10029486\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20Metadata} from \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\",\"keccak256\":\"0x00c23b80f74717a6765b606001c5c633116020d488ee8f53600685b8200e4bf3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Proxy} from \\\"../Proxy.sol\\\";\\nimport {ERC1967Utils} from \\\"./ERC1967Utils.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[ERC-1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `implementation`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `implementation`. This will typically be an\\n     * encoded function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     *\\n     * Requirements:\\n     *\\n     * - If `data` is empty, `msg.value` must be zero.\\n     */\\n    constructor(address implementation, bytes memory _data) payable {\\n        ERC1967Utils.upgradeToAndCall(implementation, _data);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by ERC-1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return ERC1967Utils.getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0x0a8a5b994d4c4da9f61d128945cc8c9e60dcbc72bf532f72ae42a48ea90eed9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.21;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {IERC1967} from \\\"../../interfaces/IERC1967.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This library provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[ERC-1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit IERC1967.Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by ERC-1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit IERC1967.AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the ERC-1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit IERC1967.BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x911c3346ee26afe188f3b9dc267ef62a7ccf940aba1afa963e3922f0ca3d8a06\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback\\n     * function and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n}\\n\",\"keccak256\":\"0xc3f2ec76a3de8ed7a7007c46166f5550c72c7709e3fc7e8bb3111a7191cdedbd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (proxy/beacon/BeaconProxy.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"./IBeacon.sol\\\";\\nimport {Proxy} from \\\"../Proxy.sol\\\";\\nimport {ERC1967Utils} from \\\"../ERC1967/ERC1967Utils.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\\n *\\n * The beacon address can only be set once during construction, and cannot be changed afterwards. It is stored in an\\n * immutable variable to avoid unnecessary storage reads, and also in the beacon storage slot specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[ERC-1967] so that it can be accessed externally.\\n *\\n * CAUTION: Since the beacon address can never be changed, you must ensure that you either control the beacon, or trust\\n * the beacon to not upgrade the implementation maliciously.\\n *\\n * IMPORTANT: Do not use the implementation logic to modify the beacon storage slot. Doing so would leave the proxy in\\n * an inconsistent state where the beacon storage slot does not match the beacon address.\\n */\\ncontract BeaconProxy is Proxy {\\n    // An immutable address for the beacon to avoid unnecessary SLOADs before each delegate call.\\n    address private immutable _beacon;\\n\\n    /**\\n     * @dev Initializes the proxy with `beacon`.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\\n     * will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity\\n     * constructor.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract with the interface {IBeacon}.\\n     * - If `data` is empty, `msg.value` must be zero.\\n     */\\n    constructor(address beacon, bytes memory data) payable {\\n        ERC1967Utils.upgradeBeaconToAndCall(beacon, data);\\n        _beacon = beacon;\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Returns the beacon.\\n     */\\n    function _getBeacon() internal view virtual returns (address) {\\n        return _beacon;\\n    }\\n}\\n\",\"keccak256\":\"0xb719fe6bd47177169ae56e3a6300ca21cc966c649412a1d1156f02862e81beac\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/UpgradeableBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"./IBeacon.sol\\\";\\nimport {Ownable} from \\\"../../access/Ownable.sol\\\";\\n\\n/**\\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\\n * implementation contract, which is where they will delegate all function calls.\\n *\\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\\n */\\ncontract UpgradeableBeacon is IBeacon, Ownable {\\n    address private _implementation;\\n\\n    /**\\n     * @dev The `implementation` of the beacon is invalid.\\n     */\\n    error BeaconInvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev Emitted when the implementation returned by the beacon is changed.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Sets the address of the initial implementation, and the initial owner who can upgrade the beacon.\\n     */\\n    constructor(address implementation_, address initialOwner) Ownable(initialOwner) {\\n        _setImplementation(implementation_);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function implementation() public view virtual returns (address) {\\n        return _implementation;\\n    }\\n\\n    /**\\n     * @dev Upgrades the beacon to a new implementation.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * Requirements:\\n     *\\n     * - msg.sender must be the owner of the contract.\\n     * - `newImplementation` must be a contract.\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\\n        _setImplementation(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Sets the implementation contract address for this beacon\\n     *\\n     * Requirements:\\n     *\\n     * - `newImplementation` must be a contract.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert BeaconInvalidImplementation(newImplementation);\\n        }\\n        _implementation = newImplementation;\\n        emit Upgraded(newImplementation);\\n    }\\n}\\n\",\"keccak256\":\"0x5920bac7215d12961e23b207f6e81a1d64aa4935a4469abe95b64a96a3c3007b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (proxy/transparent/ProxyAdmin.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ITransparentUpgradeableProxy} from \\\"./TransparentUpgradeableProxy.sol\\\";\\nimport {Ownable} from \\\"../../access/Ownable.sol\\\";\\n\\n/**\\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\\n */\\ncontract ProxyAdmin is Ownable {\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgrade(address,address)`\\n     * and `upgradeAndCall(address,address,bytes)` are present, and `upgrade` must be used if no function should be called,\\n     * while `upgradeAndCall` will invoke the `receive` function if the third argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeAndCall(address,address,bytes)` is present, and the third argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev Sets the initial owner who can perform upgrades.\\n     */\\n    constructor(address initialOwner) Ownable(initialOwner) {}\\n\\n    /**\\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation.\\n     * See {TransparentUpgradeableProxy-_dispatchUpgradeToAndCall}.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     * - If `data` is empty, `msg.value` must be zero.\\n     */\\n    function upgradeAndCall(\\n        ITransparentUpgradeableProxy proxy,\\n        address implementation,\\n        bytes memory data\\n    ) public payable virtual onlyOwner {\\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\\n    }\\n}\\n\",\"keccak256\":\"0xeb19221d51578ea190f0b7d807c5f196db6ff4eca90fee396f45ce9669080ba0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC1967Utils} from \\\"../ERC1967/ERC1967Utils.sol\\\";\\nimport {ERC1967Proxy} from \\\"../ERC1967/ERC1967Proxy.sol\\\";\\nimport {IERC1967} from \\\"../../interfaces/IERC1967.sol\\\";\\nimport {ProxyAdmin} from \\\"./ProxyAdmin.sol\\\";\\n\\n/**\\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\\n * does not implement this interface directly, and its upgradeability mechanism is implemented by an internal dispatch\\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\\n * include them in the ABI so this interface must be used to interact with it.\\n */\\ninterface ITransparentUpgradeableProxy is IERC1967 {\\n    /// @dev See {UUPSUpgradeable-upgradeToAndCall}\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable;\\n}\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable through an associated {ProxyAdmin} instance.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches the {ITransparentUpgradeableProxy-upgradeToAndCall} function exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can call the `upgradeToAndCall` function but any other call won't be forwarded to\\n * the implementation. If the admin tries to call a function on the implementation it will fail with an error indicating\\n * the proxy admin cannot fallback to the target implementation.\\n *\\n * These properties mean that the admin account can only be used for upgrading the proxy, so it's best if it's a\\n * dedicated account that is not used for anything else. This will avoid headaches due to sudden errors when trying to\\n * call a function from the proxy implementation. For this reason, the proxy deploys an instance of {ProxyAdmin} and\\n * allows upgrades only if they come through it. You should think of the `ProxyAdmin` instance as the administrative\\n * interface of the proxy, including the ability to change who can trigger upgrades by transferring ownership.\\n *\\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\\n * inherit from that interface, and instead `upgradeToAndCall` is implicitly implemented using a custom dispatch\\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\\n * implementation.\\n *\\n * NOTE: This proxy does not inherit from {Context} deliberately. The {ProxyAdmin} of this contract won't send a\\n * meta-transaction in any way, and any other meta-transaction setup should be made in the implementation contract.\\n *\\n * IMPORTANT: This contract avoids unnecessary storage reads by setting the admin only during construction as an\\n * immutable variable, preventing any changes thereafter. However, the admin slot defined in ERC-1967 can still be\\n * overwritten by the implementation logic pointed to by this proxy. In such cases, the contract may end up in an\\n * undesirable state where the admin slot is different from the actual admin. Relying on the value of the admin slot\\n * is generally fine if the implementation is trusted.\\n *\\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the\\n * compiler will not check that there are no selector conflicts, due to the note above. A selector clash between any new\\n * function and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This\\n * could render the `upgradeToAndCall` function inaccessible, preventing upgradeability and compromising transparency.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    // An immutable address for the admin to avoid unnecessary SLOADs before each call\\n    // at the expense of removing the ability to change the admin once it's set.\\n    // This is acceptable if the admin is always a ProxyAdmin instance or similar contract\\n    // with its own ability to transfer the permissions to another account.\\n    address private immutable _admin;\\n\\n    /**\\n     * @dev The proxy caller is the current admin, and can't fallback to the proxy target.\\n     */\\n    error ProxyDeniedAdminAccess();\\n\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by an instance of a {ProxyAdmin} with an `initialOwner`,\\n     * backed by the implementation at `_logic`, and optionally initialized with `_data` as explained in\\n     * {ERC1967Proxy-constructor}.\\n     */\\n    constructor(address _logic, address initialOwner, bytes memory _data) payable ERC1967Proxy(_logic, _data) {\\n        _admin = address(new ProxyAdmin(initialOwner));\\n        // Set the storage value and emit an event for ERC-1967 compatibility\\n        ERC1967Utils.changeAdmin(_proxyAdmin());\\n    }\\n\\n    /**\\n     * @dev Returns the admin of this proxy.\\n     */\\n    function _proxyAdmin() internal view virtual returns (address) {\\n        return _admin;\\n    }\\n\\n    /**\\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior.\\n     */\\n    function _fallback() internal virtual override {\\n        if (msg.sender == _proxyAdmin()) {\\n            if (msg.sig != ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\\n                revert ProxyDeniedAdminAccess();\\n            } else {\\n                _dispatchUpgradeToAndCall();\\n            }\\n        } else {\\n            super._fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy. See {ERC1967Utils-upgradeToAndCall}.\\n     *\\n     * Requirements:\\n     *\\n     * - If `data` is empty, `msg.value` must be zero.\\n     */\\n    function _dispatchUpgradeToAndCall() private {\\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\\n        ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n    }\\n}\\n\",\"keccak256\":\"0x724b755843cff10a8e1503d374b857c9e7648be24e7acf1e5bee0584f1b0505c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[ERC].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the zero address.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x68d6fdbeb467192c3627a46aa7bf5cbb73267363b740abc511f521a5a41a446e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC-1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC-1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x61a23d601c2ab69dd726ac55058604cbda98e1d728ba31a51c379a3f9eeea715\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[ERC].\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x35d120c427299af1525aaf07955314d9e36a62f14408eb93dec71a2e001f74d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC1155/utils/ERC1155Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155Receiver} from \\\"../IERC1155Receiver.sol\\\";\\nimport {IERC1155Errors} from \\\"../../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Library that provide common ERC-1155 utility functions.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-1155[ERC-1155].\\n *\\n * _Available since v5.1._\\n */\\nlibrary ERC1155Utils {\\n    /**\\n     * @dev Performs an acceptance check for the provided `operator` by calling {IERC1155-onERC1155Received}\\n     * on the `to` address. The `operator` is generally the address that initiated the token transfer (i.e. `msg.sender`).\\n     *\\n     * The acceptance call is not executed and treated as a no-op if the target address doesn't contain code (i.e. an EOA).\\n     * Otherwise, the recipient must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value to accept\\n     * the transfer.\\n     */\\n    function checkOnERC1155Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, value, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    // Tokens rejected\\n                    revert IERC1155Errors.ERC1155InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-IERC1155Receiver implementer\\n                    revert IERC1155Errors.ERC1155InvalidReceiver(to);\\n                } else {\\n                    assembly (\\\"memory-safe\\\") {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a batch acceptance check for the provided `operator` by calling {IERC1155-onERC1155BatchReceived}\\n     * on the `to` address. The `operator` is generally the address that initiated the token transfer (i.e. `msg.sender`).\\n     *\\n     * The acceptance call is not executed and treated as a no-op if the target address doesn't contain code (i.e. an EOA).\\n     * Otherwise, the recipient must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value to accept\\n     * the transfer.\\n     */\\n    function checkOnERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, values, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    // Tokens rejected\\n                    revert IERC1155Errors.ERC1155InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-IERC1155Receiver implementer\\n                    revert IERC1155Errors.ERC1155InvalidReceiver(to);\\n                } else {\\n                    assembly (\\\"memory-safe\\\") {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x30afe9013aaeb3ba735284a9310792776f57a3b2db6fc1d99628f2c47287f5cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9d8da059267bac779a2dbbb9a26c2acf00ca83085e105d62d5d4ef96054a47f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Arrays.sol)\\n// This file was procedurally generated from scripts/generate/templates/Arrays.js.\\n\\npragma solidity ^0.8.20;\\n\\nimport {Comparators} from \\\"./Comparators.sol\\\";\\nimport {SlotDerivation} from \\\"./SlotDerivation.sol\\\";\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\nimport {Math} from \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n    using SlotDerivation for bytes32;\\n    using StorageSlot for bytes32;\\n\\n    /**\\n     * @dev Sort an array of uint256 (in memory) following the provided comparator function.\\n     *\\n     * This function does the sorting \\\"in place\\\", meaning that it overrides the input. The object is returned for\\n     * convenience, but that returned value can be discarded safely if the caller has a memory pointer to the array.\\n     *\\n     * NOTE: this function's cost is `O(n \\u00b7 log(n))` in average and `O(n\\u00b2)` in the worst case, with n the length of the\\n     * array. Using it in view functions that are executed through `eth_call` is safe, but one should be very careful\\n     * when executing this as part of a transaction. If the array being sorted is too large, the sort operation may\\n     * consume more gas than is available in a block, leading to potential DoS.\\n     *\\n     * IMPORTANT: Consider memory side-effects when using custom comparator functions that access memory in an unsafe way.\\n     */\\n    function sort(\\n        uint256[] memory array,\\n        function(uint256, uint256) pure returns (bool) comp\\n    ) internal pure returns (uint256[] memory) {\\n        _quickSort(_begin(array), _end(array), comp);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Variant of {sort} that sorts an array of uint256 in increasing order.\\n     */\\n    function sort(uint256[] memory array) internal pure returns (uint256[] memory) {\\n        sort(array, Comparators.lt);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Sort an array of address (in memory) following the provided comparator function.\\n     *\\n     * This function does the sorting \\\"in place\\\", meaning that it overrides the input. The object is returned for\\n     * convenience, but that returned value can be discarded safely if the caller has a memory pointer to the array.\\n     *\\n     * NOTE: this function's cost is `O(n \\u00b7 log(n))` in average and `O(n\\u00b2)` in the worst case, with n the length of the\\n     * array. Using it in view functions that are executed through `eth_call` is safe, but one should be very careful\\n     * when executing this as part of a transaction. If the array being sorted is too large, the sort operation may\\n     * consume more gas than is available in a block, leading to potential DoS.\\n     *\\n     * IMPORTANT: Consider memory side-effects when using custom comparator functions that access memory in an unsafe way.\\n     */\\n    function sort(\\n        address[] memory array,\\n        function(address, address) pure returns (bool) comp\\n    ) internal pure returns (address[] memory) {\\n        sort(_castToUint256Array(array), _castToUint256Comp(comp));\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Variant of {sort} that sorts an array of address in increasing order.\\n     */\\n    function sort(address[] memory array) internal pure returns (address[] memory) {\\n        sort(_castToUint256Array(array), Comparators.lt);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Sort an array of bytes32 (in memory) following the provided comparator function.\\n     *\\n     * This function does the sorting \\\"in place\\\", meaning that it overrides the input. The object is returned for\\n     * convenience, but that returned value can be discarded safely if the caller has a memory pointer to the array.\\n     *\\n     * NOTE: this function's cost is `O(n \\u00b7 log(n))` in average and `O(n\\u00b2)` in the worst case, with n the length of the\\n     * array. Using it in view functions that are executed through `eth_call` is safe, but one should be very careful\\n     * when executing this as part of a transaction. If the array being sorted is too large, the sort operation may\\n     * consume more gas than is available in a block, leading to potential DoS.\\n     *\\n     * IMPORTANT: Consider memory side-effects when using custom comparator functions that access memory in an unsafe way.\\n     */\\n    function sort(\\n        bytes32[] memory array,\\n        function(bytes32, bytes32) pure returns (bool) comp\\n    ) internal pure returns (bytes32[] memory) {\\n        sort(_castToUint256Array(array), _castToUint256Comp(comp));\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Variant of {sort} that sorts an array of bytes32 in increasing order.\\n     */\\n    function sort(bytes32[] memory array) internal pure returns (bytes32[] memory) {\\n        sort(_castToUint256Array(array), Comparators.lt);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Performs a quick sort of a segment of memory. The segment sorted starts at `begin` (inclusive), and stops\\n     * at end (exclusive). Sorting follows the `comp` comparator.\\n     *\\n     * Invariant: `begin <= end`. This is the case when initially called by {sort} and is preserved in subcalls.\\n     *\\n     * IMPORTANT: Memory locations between `begin` and `end` are not validated/zeroed. This function should\\n     * be used only if the limits are within a memory array.\\n     */\\n    function _quickSort(uint256 begin, uint256 end, function(uint256, uint256) pure returns (bool) comp) private pure {\\n        unchecked {\\n            if (end - begin < 0x40) return;\\n\\n            // Use first element as pivot\\n            uint256 pivot = _mload(begin);\\n            // Position where the pivot should be at the end of the loop\\n            uint256 pos = begin;\\n\\n            for (uint256 it = begin + 0x20; it < end; it += 0x20) {\\n                if (comp(_mload(it), pivot)) {\\n                    // If the value stored at the iterator's position comes before the pivot, we increment the\\n                    // position of the pivot and move the value there.\\n                    pos += 0x20;\\n                    _swap(pos, it);\\n                }\\n            }\\n\\n            _swap(begin, pos); // Swap pivot into place\\n            _quickSort(begin, pos, comp); // Sort the left side of the pivot\\n            _quickSort(pos + 0x20, end, comp); // Sort the right side of the pivot\\n        }\\n    }\\n\\n    /**\\n     * @dev Pointer to the memory location of the first element of `array`.\\n     */\\n    function _begin(uint256[] memory array) private pure returns (uint256 ptr) {\\n        assembly (\\\"memory-safe\\\") {\\n            ptr := add(array, 0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Pointer to the memory location of the first memory word (32bytes) after `array`. This is the memory word\\n     * that comes just after the last element of the array.\\n     */\\n    function _end(uint256[] memory array) private pure returns (uint256 ptr) {\\n        unchecked {\\n            return _begin(array) + array.length * 0x20;\\n        }\\n    }\\n\\n    /**\\n     * @dev Load memory word (as a uint256) at location `ptr`.\\n     */\\n    function _mload(uint256 ptr) private pure returns (uint256 value) {\\n        assembly {\\n            value := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @dev Swaps the elements memory location `ptr1` and `ptr2`.\\n     */\\n    function _swap(uint256 ptr1, uint256 ptr2) private pure {\\n        assembly {\\n            let value1 := mload(ptr1)\\n            let value2 := mload(ptr2)\\n            mstore(ptr1, value2)\\n            mstore(ptr2, value1)\\n        }\\n    }\\n\\n    /// @dev Helper: low level cast address memory array to uint256 memory array\\n    function _castToUint256Array(address[] memory input) private pure returns (uint256[] memory output) {\\n        assembly {\\n            output := input\\n        }\\n    }\\n\\n    /// @dev Helper: low level cast bytes32 memory array to uint256 memory array\\n    function _castToUint256Array(bytes32[] memory input) private pure returns (uint256[] memory output) {\\n        assembly {\\n            output := input\\n        }\\n    }\\n\\n    /// @dev Helper: low level cast address comp function to uint256 comp function\\n    function _castToUint256Comp(\\n        function(address, address) pure returns (bool) input\\n    ) private pure returns (function(uint256, uint256) pure returns (bool) output) {\\n        assembly {\\n            output := input\\n        }\\n    }\\n\\n    /// @dev Helper: low level cast bytes32 comp function to uint256 comp function\\n    function _castToUint256Comp(\\n        function(bytes32, bytes32) pure returns (bool) input\\n    ) private pure returns (function(uint256, uint256) pure returns (bool) output) {\\n        assembly {\\n            output := input\\n        }\\n    }\\n\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * NOTE: The `array` is expected to be sorted in ascending order, and to\\n     * contain no repeated elements.\\n     *\\n     * IMPORTANT: Deprecated. This implementation behaves as {lowerBound} but lacks\\n     * support for repeated elements in the array. The {lowerBound} function should\\n     * be used instead.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n\\n    /**\\n     * @dev Searches an `array` sorted in ascending order and returns the first\\n     * index that contains a value greater or equal than `element`. If no such index\\n     * exists (i.e. all values in the array are strictly less than `element`), the array\\n     * length is returned. Time complexity O(log n).\\n     *\\n     * See C++'s https://en.cppreference.com/w/cpp/algorithm/lower_bound[lower_bound].\\n     */\\n    function lowerBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value < element) {\\n                // this cannot overflow because mid < high\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            } else {\\n                high = mid;\\n            }\\n        }\\n\\n        return low;\\n    }\\n\\n    /**\\n     * @dev Searches an `array` sorted in ascending order and returns the first\\n     * index that contains a value strictly greater than `element`. If no such index\\n     * exists (i.e. all values in the array are strictly less than `element`), the array\\n     * length is returned. Time complexity O(log n).\\n     *\\n     * See C++'s https://en.cppreference.com/w/cpp/algorithm/upper_bound[upper_bound].\\n     */\\n    function upperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                // this cannot overflow because mid < high\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            }\\n        }\\n\\n        return low;\\n    }\\n\\n    /**\\n     * @dev Same as {lowerBound}, but with an array in memory.\\n     */\\n    function lowerBoundMemory(uint256[] memory array, uint256 element) internal pure returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeMemoryAccess(array, mid) < element) {\\n                // this cannot overflow because mid < high\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            } else {\\n                high = mid;\\n            }\\n        }\\n\\n        return low;\\n    }\\n\\n    /**\\n     * @dev Same as {upperBound}, but with an array in memory.\\n     */\\n    function upperBoundMemory(uint256[] memory array, uint256 element) internal pure returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeMemoryAccess(array, mid) > element) {\\n                high = mid;\\n            } else {\\n                // this cannot overflow because mid < high\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            }\\n        }\\n\\n        return low;\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\\n        bytes32 slot;\\n        assembly (\\\"memory-safe\\\") {\\n            slot := arr.slot\\n        }\\n        return slot.deriveArray().offset(pos).getAddressSlot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\\n        bytes32 slot;\\n        assembly (\\\"memory-safe\\\") {\\n            slot := arr.slot\\n        }\\n        return slot.deriveArray().offset(pos).getBytes32Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\\n        bytes32 slot;\\n        assembly (\\\"memory-safe\\\") {\\n            slot := arr.slot\\n        }\\n        return slot.deriveArray().offset(pos).getUint256Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(address[] memory arr, uint256 pos) internal pure returns (address res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(bytes32[] memory arr, uint256 pos) internal pure returns (bytes32 res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(uint256[] memory arr, uint256 pos) internal pure returns (uint256 res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper to set the length of an dynamic array. Directly writing to `.length` is forbidden.\\n     *\\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\\n     */\\n    function unsafeSetLength(address[] storage array, uint256 len) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(array.slot, len)\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper to set the length of an dynamic array. Directly writing to `.length` is forbidden.\\n     *\\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\\n     */\\n    function unsafeSetLength(bytes32[] storage array, uint256 len) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(array.slot, len)\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper to set the length of an dynamic array. Directly writing to `.length` is forbidden.\\n     *\\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\\n     */\\n    function unsafeSetLength(uint256[] storage array, uint256 len) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(array.slot, len)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf9586854de33dc9d3a7160cad8170fdfb4119d02a44bad90ba16d71d701cc92\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Comparators.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Comparators.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides a set of functions to compare values.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Comparators {\\n    function lt(uint256 a, uint256 b) internal pure returns (bool) {\\n        return a < b;\\n    }\\n\\n    function gt(uint256 a, uint256 b) internal pure returns (bool) {\\n        return a > b;\\n    }\\n}\\n\",\"keccak256\":\"0x302eecd8cf323b4690e3494a7d960b3cbce077032ab8ef655b323cdd136cec58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/SlotDerivation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/SlotDerivation.sol)\\n// This file was procedurally generated from scripts/generate/templates/SlotDerivation.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for computing storage (and transient storage) locations from namespaces and deriving slots\\n * corresponding to standard patterns. The derivation method for array and mapping matches the storage layout used by\\n * the solidity language / compiler.\\n *\\n * See https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays[Solidity docs for mappings and dynamic arrays.].\\n *\\n * Example usage:\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using StorageSlot for bytes32;\\n *     using SlotDerivation for bytes32;\\n *\\n *     // Declare a namespace\\n *     string private constant _NAMESPACE = \\\"<namespace>\\\" // eg. OpenZeppelin.Slot\\n *\\n *     function setValueInNamespace(uint256 key, address newValue) internal {\\n *         _NAMESPACE.erc7201Slot().deriveMapping(key).getAddressSlot().value = newValue;\\n *     }\\n *\\n *     function getValueInNamespace(uint256 key) internal view returns (address) {\\n *         return _NAMESPACE.erc7201Slot().deriveMapping(key).getAddressSlot().value;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {StorageSlot}.\\n *\\n * NOTE: This library provides a way to manipulate storage locations in a non-standard way. Tooling for checking\\n * upgrade safety will ignore the slots accessed through this library.\\n *\\n * _Available since v5.1._\\n */\\nlibrary SlotDerivation {\\n    /**\\n     * @dev Derive an ERC-7201 slot from a string (namespace).\\n     */\\n    function erc7201Slot(string memory namespace) internal pure returns (bytes32 slot) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, sub(keccak256(add(namespace, 0x20), mload(namespace)), 1))\\n            slot := and(keccak256(0x00, 0x20), not(0xff))\\n        }\\n    }\\n\\n    /**\\n     * @dev Add an offset to a slot to get the n-th element of a structure or an array.\\n     */\\n    function offset(bytes32 slot, uint256 pos) internal pure returns (bytes32 result) {\\n        unchecked {\\n            return bytes32(uint256(slot) + pos);\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of the first element in an array from the slot where the length is stored.\\n     */\\n    function deriveArray(bytes32 slot) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, slot)\\n            result := keccak256(0x00, 0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, address key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, and(key, shr(96, not(0))))\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, bool key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, iszero(iszero(key)))\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, bytes32 key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, key)\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, uint256 key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, key)\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, int256 key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, key)\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, string memory key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            let length := mload(key)\\n            let begin := add(key, 0x20)\\n            let end := add(begin, length)\\n            let cache := mload(end)\\n            mstore(end, slot)\\n            result := keccak256(begin, add(length, 0x20))\\n            mstore(end, cache)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, bytes memory key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            let length := mload(key)\\n            let begin := add(key, 0x20)\\n            let end := add(begin, length)\\n            let cache := mload(end)\\n            mstore(end, slot)\\n            result := keccak256(begin, add(length, 0x20))\\n            mstore(end, cache)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8447b57b63810fe2e367c09496a966f143ec0e825d71ddb9fce2506cff84b618\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n            // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2\\u00b2\\u2075\\u2076 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 exp;\\n        unchecked {\\n            exp = 128 * SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 64 * SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 32 * SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 16 * SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 8 * SafeCast.toUint(value > (1 << 8) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 4 * SafeCast.toUint(value > (1 << 4) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 2 * SafeCast.toUint(value > (1 << 2) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            result += SafeCast.toUint(value > 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 isGt;\\n        unchecked {\\n            isGt = SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= isGt * 128;\\n            result += isGt * 16;\\n\\n            isGt = SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= isGt * 64;\\n            result += isGt * 8;\\n\\n            isGt = SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= isGt * 32;\\n            result += isGt * 4;\\n\\n            isGt = SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= isGt * 16;\\n            result += isGt * 2;\\n\\n            result += SafeCast.toUint(value > (1 << 8) - 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0xa00be322d7db5786750ce0ac7e2f5b633ac30a5ed5fa1ced1e74acfc19acecea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9b161e97b8967d4bc0c08d25741889a30692cdda4b71910bf1b0e315f1962212\",\"license\":\"MIT\"},\"contracts/Governance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport { ERC1155HolderUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\\\";\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\nimport { OwnableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport { TransparentUpgradeableProxy } from \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\n\\nimport { TokenPayment, TokenPayments } from \\\"./libraries/TokenPayments.sol\\\";\\nimport { OracleLibrary } from \\\"./libraries/OracleLibrary.sol\\\";\\nimport { FixedPoint128 } from \\\"./libraries/FixedPoint128.sol\\\";\\nimport { FullMath } from \\\"./libraries/FullMath.sol\\\";\\nimport { Epochs } from \\\"./libraries/Epochs.sol\\\";\\n\\nimport { GToken, GTokenLib } from \\\"./tokens/GToken/GToken.sol\\\";\\n\\nimport { Pair } from \\\"./Pair.sol\\\";\\nimport { Router } from \\\"./Router.sol\\\";\\nimport { PriceOracle } from \\\"./PriceOracle.sol\\\";\\n\\nimport \\\"./types.sol\\\";\\nimport \\\"./errors.sol\\\";\\n\\nlibrary DeployGToken {\\n\\tfunction create(\\n\\t\\tEpochs.Storage memory epochs,\\n\\t\\taddress initialOwner,\\n\\t\\taddress proxyAdmin\\n\\t) external returns (address) {\\n\\t\\treturn\\n\\t\\t\\taddress(\\n\\t\\t\\t\\tnew TransparentUpgradeableProxy(\\n\\t\\t\\t\\t\\taddress(new GToken()),\\n\\t\\t\\t\\t\\tproxyAdmin,\\n\\t\\t\\t\\t\\tabi.encodeWithSelector(\\n\\t\\t\\t\\t\\t\\tGToken.initialize.selector,\\n\\t\\t\\t\\t\\t\\tepochs,\\n\\t\\t\\t\\t\\t\\tinitialOwner\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t}\\n}\\n\\n/// @title Governance Contract\\n/// @notice This contract handles the governance process by allowing users to lock LP tokens and mint GTokens.\\n/// @dev This contract interacts with the GTokens library and manages LP token payments.\\ncontract Governance is ERC1155HolderUpgradeable, OwnableUpgradeable, Errors {\\n\\tusing Epochs for Epochs.Storage;\\n\\tusing GTokenLib for GTokenLib.Attributes;\\n\\tusing TokenPayments for TokenPayment;\\n\\tusing TokenPayments for address;\\n\\n\\t/// @custom:storage-location erc7201:gainz.Governance.storage\\n\\tstruct GovernanceStorage {\\n\\t\\tuint256 rewardPerShare;\\n\\t\\tuint256 rewardsReserve;\\n\\t\\t// The following values should be immutable\\n\\t\\taddress gtoken;\\n\\t\\taddress gainzToken;\\n\\t\\t address router;\\n\\t\\taddress wNativeToken;\\n\\t\\tEpochs.Storage epochs;\\n\\t}\\n\\n\\t// keccak256(abi.encode(uint256(keccak256(\\\"gainz.Governance.storage\\\")) - 1)) & ~bytes32(uint256(0xff));\\n\\tbytes32 private constant GOVERNANCE_STORAGE_LOCATION =\\n\\t\\t0x8a4dda5430cdcd8aca8f2a075bbbae5f31557dc6b6b93555c9c43f674de00c00;\\n\\n\\tfunction _getGovernanceStorage()\\n\\t\\tprivate\\n\\t\\tpure\\n\\t\\treturns (GovernanceStorage storage $)\\n\\t{\\n\\t\\tassembly {\\n\\t\\t\\t$.slot := GOVERNANCE_STORAGE_LOCATION\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Function to initialize the Governance contract.\\n\\t/// @param epochs The epochs storage instance for managing epochs.\\n\\tfunction initialize(\\n\\t\\tEpochs.Storage memory epochs,\\n\\t\\taddress gainzToken,\\n\\t\\taddress wNativeToken,\\n\\t\\taddress proxyAdmin\\n\\t) public initializer {\\n\\t\\taddress router = msg.sender;\\n\\t\\t__Ownable_init(router);\\n\\n\\t\\tGovernanceStorage storage $ = _getGovernanceStorage();\\n\\n\\t\\t$.epochs = epochs;\\n\\t\\t$.gtoken = DeployGToken.create($.epochs, address(this), proxyAdmin);\\n\\n\\t\\t$.router = router;\\n\\t\\t$.wNativeToken = wNativeToken;\\n\\t\\trequire(\\n\\t\\t\\t$.wNativeToken != address(0),\\n\\t\\t\\t\\\"Governance: INVALID_WRAPPED_NATIVE_TOKEN\\\"\\n\\t\\t);\\n\\n\\t\\trequire(gainzToken != address(0), \\\"Invalid gainzToken\\\");\\n\\t\\t$.gainzToken = gainzToken;\\n\\t}\\n\\n\\terror InvalidPayment(TokenPayment payment, uint256 value);\\n\\n\\tfunction _getDesiredToken(\\n\\t\\taddress[] calldata path,\\n\\t\\tTokenPayment calldata stakingPayment,\\n\\t\\tuint256 amountOutMin\\n\\t) internal returns (TokenPayment memory payment) {\\n\\t\\tif (path.length == 0) revert InvalidPath(path);\\n\\n\\t\\tuint256 amountIn = stakingPayment.amount / 2;\\n\\n\\t\\tpayment.token = path[path.length - 1];\\n\\t\\tpayment.amount = payment.token == stakingPayment.token\\n\\t\\t\\t? amountIn\\n\\t\\t\\t: Router(payable(_getGovernanceStorage().router)).swapExactTokensForTokens(\\n\\t\\t\\t\\tamountIn,\\n\\t\\t\\t\\tamountOutMin,\\n\\t\\t\\t\\tpath,\\n\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\tblock.timestamp + 1\\n\\t\\t\\t)[path.length - 1];\\n\\t}\\n\\n\\tfunction _receiveAndApprovePayment(\\n\\t\\tTokenPayment memory payment,\\n\\t\\taddress router\\n\\t) internal returns (address wNativeToken) {\\n\\t\\twNativeToken = Router(payable(router)).getWrappedNativeToken();\\n\\t\\tbool paymentIsNative = payment.token == wNativeToken;\\n\\n\\t\\tif (paymentIsNative) payment.token = address(0);\\n\\t\\tpayment.receiveTokenFor(msg.sender, address(this), wNativeToken);\\n\\t\\tif (paymentIsNative) payment.token = wNativeToken;\\n\\n\\t\\t// Optimistically approve `router` to spend payment in `_getDesiredToken` call\\n\\t\\tpayment.approve(router);\\n\\t}\\n\\n\\tfunction _computeLiqValue(\\n\\t\\tGovernanceStorage storage $,\\n\\t\\tTokenPayment memory paymentA,\\n\\t\\tTokenPayment memory paymentB,\\n\\t\\taddress[] calldata pathToNative\\n\\t) internal returns (uint256 value) {\\n\\t\\t// Early return if either payment{A,B} is native\\n\\t\\tif (paymentA.token == $.wNativeToken) return paymentA.amount;\\n\\t\\tif (paymentB.token == $.wNativeToken) return paymentB.amount;\\n\\n\\t\\tif (\\n\\t\\t\\t// `pathToNative` has valid length\\n\\t\\t\\tpathToNative.length < 2 || // The last token must be native token (i.e the reference token)\\n\\t\\t\\tpathToNative[pathToNative.length - 1] != $.wNativeToken || //  The first token must be one of the payments' token\\n\\t\\t\\t!(pathToNative[0] == paymentA.token ||\\n\\t\\t\\t\\tpathToNative[0] == paymentB.token)\\n\\t\\t) revert InvalidPath(pathToNative);\\n\\n\\t\\tTokenPayment memory payment = pathToNative[0] == paymentA.token\\n\\t\\t\\t? paymentA\\n\\t\\t\\t: paymentB;\\n\\t\\tPriceOracle priceOracle = PriceOracle(\\n\\t\\t\\tOracleLibrary.oracleAddress($.router)\\n\\t\\t);\\n\\n\\t\\t// Start with payment amount\\n\\t\\tvalue = payment.amount;\\n\\t\\tfor (uint256 i; i < pathToNative.length - 1; i++) {\\n\\t\\t\\tvalue = priceOracle.updateAndConsult(\\n\\t\\t\\t\\tpathToNative[i],\\n\\t\\t\\t\\tpathToNative[i + 1],\\n\\t\\t\\t\\tvalue\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\trequire(value > 0, \\\"Governance: INVALID_COMPUTED_LIQ_VALUE\\\");\\n\\t}\\n\\n\\tfunction stake(\\n\\t\\tTokenPayment calldata payment,\\n\\t\\tuint256 epochsLocked,\\n\\t\\taddress[][3] calldata paths, // 0 -> pathA, 1 -> pathB, 2 -> pathToNative\\n\\t\\tuint256 amountOutMinA,\\n\\t\\tuint256 amountOutMinB\\n\\t) external payable returns (uint256) {\\n\\t\\tif (\\n\\t\\t\\tpayment.amount == 0 ||\\n\\t\\t\\t(msg.value > 0 && payment.amount != msg.value)\\n\\t\\t) revert InvalidPayment(payment, msg.value);\\n\\n\\t\\tGovernanceStorage storage $ = _getGovernanceStorage();\\n\\n\\t\\tLiquidityInfo memory liqInfo;\\n\\t\\t{\\n\\t\\t\\t_receiveAndApprovePayment(payment, $.router);\\n\\n\\t\\t\\tTokenPayment memory paymentA = _getDesiredToken(\\n\\t\\t\\t\\tpaths[0],\\n\\t\\t\\t\\tpayment,\\n\\t\\t\\t\\tamountOutMinA\\n\\t\\t\\t);\\n\\t\\t\\tTokenPayment memory paymentB = _getDesiredToken(\\n\\t\\t\\t\\tpaths[1],\\n\\t\\t\\t\\tpayment,\\n\\t\\t\\t\\tamountOutMinB\\n\\t\\t\\t);\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tpaymentA.token != paymentB.token,\\n\\t\\t\\t\\t\\\"Governance: INVALID_PATH_VALUES\\\"\\n\\t\\t\\t);\\n\\n\\t\\t\\tif (paymentA.token != payment.token) paymentA.approve($.router);\\n\\t\\t\\tif (paymentB.token != payment.token) paymentB.approve($.router);\\n\\n\\t\\t\\t// Set liquidity info\\n\\t\\t\\t(liqInfo.token0, liqInfo.token1) = paymentA.token < paymentB.token\\n\\t\\t\\t\\t? (paymentA.token, paymentB.token)\\n\\t\\t\\t\\t: (paymentB.token, paymentA.token);\\n\\n\\t\\t\\t(, , liqInfo.liquidity, liqInfo.pair) = Router(payable($.router))\\n\\t\\t\\t\\t.addLiquidity(paymentA, paymentB, 0, 0, block.timestamp + 1);\\n\\n\\t\\t\\tliqInfo.liqValue = payment.token == $.wNativeToken\\n\\t\\t\\t\\t? msg.value / 2\\n\\t\\t\\t\\t: _computeLiqValue($, paymentA, paymentB, paths[2]);\\n\\t\\t}\\n\\n\\t\\treturn\\n\\t\\t\\tGToken($.gtoken).mintGToken(\\n\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\t$.rewardPerShare,\\n\\t\\t\\t\\tepochsLocked,\\n\\t\\t\\t\\t$.epochs.currentEpoch(),\\n\\t\\t\\t\\tliqInfo\\n\\t\\t\\t);\\n\\t}\\n\\n\\t/// @notice Updates the rewards reserve by adding the specified amount.\\n\\tfunction updateRewardReserve() external {\\n\\t\\tGovernanceStorage storage $ = _getGovernanceStorage();\\n\\n\\t\\t// Transfer the amount of Gainz tokens to the contract\\n\\t\\tuint256 amount = IERC20($.gainzToken).balanceOf(address(this)) -\\n\\t\\t\\t$.rewardsReserve;\\n\\n\\t\\tuint256 totalStakeWeight = GToken($.gtoken).totalStakeWeight();\\n\\t\\tif (totalStakeWeight > 0) {\\n\\t\\t\\t// Update the rewards reserve\\n\\t\\t\\t$.rewardsReserve += amount;\\n\\t\\t\\t$.rewardPerShare += FullMath.mulDiv(\\n\\t\\t\\t\\tamount,\\n\\t\\t\\t\\tFixedPoint128.Q128,\\n\\t\\t\\t\\ttotalStakeWeight\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _calculateClaimableReward(\\n\\t\\taddress user,\\n\\t\\tuint256 nonce\\n\\t)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256 claimableReward,\\n\\t\\t\\tGTokenLib.Attributes memory attributes\\n\\t\\t)\\n\\t{\\n\\t\\tGovernanceStorage storage $ = _getGovernanceStorage();\\n\\t\\tattributes = GToken($.gtoken).getBalanceAt(user, nonce).attributes;\\n\\n\\t\\tclaimableReward = FullMath.mulDiv(\\n\\t\\t\\tattributes.stakeWeight,\\n\\t\\t\\t$.rewardPerShare - attributes.rewardPerShare,\\n\\t\\t\\tFixedPoint128.Q128\\n\\t\\t);\\n\\t}\\n\\n\\t/// @notice Allows a user to claim their accumulated rewards based on their current stake.\\n\\t/// @dev This function will transfer the calculated claimable reward to the user,\\n\\t/// \\t update the user's reward attributes, and decrease the rewards reserve.\\n\\t/// @param nonce The specific nonce representing a unique staking position of the user.\\n\\t/// @return Nonce of the updated GToken for the user after claiming the reward.\\n\\tfunction claimRewards(uint256 nonce) external returns (uint256) {\\n\\t\\tGovernanceStorage storage $ = _getGovernanceStorage();\\n\\n\\t\\taddress user = msg.sender;\\n\\t\\t(\\n\\t\\t\\tuint256 claimableReward,\\n\\t\\t\\tGTokenLib.Attributes memory attributes\\n\\t\\t) = _calculateClaimableReward(user, nonce);\\n\\n\\t\\trequire(claimableReward > 0, \\\"Governance: No rewards to claim\\\");\\n\\n\\t\\t$.rewardsReserve -= claimableReward;\\n\\t\\tattributes.rewardPerShare = $.rewardPerShare;\\n\\t\\tattributes.lastClaimEpoch = $.epochs.currentEpoch();\\n\\n\\t\\tIERC20($.gainzToken).transfer(user, claimableReward);\\n\\t\\treturn GToken($.gtoken).update(user, nonce, attributes);\\n\\t}\\n\\n\\tfunction unStake(uint256 nonce, uint amount0Min, uint amount1Min) external {\\n\\t\\tGovernanceStorage storage $ = _getGovernanceStorage();\\n\\n\\t\\taddress user = msg.sender;\\n\\n\\t\\t// Calculate rewards to be claimed on unstaking\\n\\t\\t(\\n\\t\\t\\tuint256 claimableReward,\\n\\t\\t\\tGTokenLib.Attributes memory attributes\\n\\t\\t) = _calculateClaimableReward(user, nonce);\\n\\n\\t\\t// Transfer the claimable rewards to the user, if any\\n\\t\\tif (claimableReward > 0) {\\n\\t\\t\\t$.rewardsReserve -= claimableReward;\\n\\t\\t\\tIERC20($.gainzToken).transfer(user, claimableReward);\\n\\t\\t}\\n\\n\\t\\t// Calculate the amount of LP tokens to return to the user\\n\\t\\tuint256 liquidity = attributes.lpDetails.liquidity;\\n\\t\\tuint256 liquidityToReturn = attributes.epochsLocked == 0\\n\\t\\t\\t? liquidity\\n\\t\\t\\t: attributes.valueToKeep(\\n\\t\\t\\t\\tliquidity,\\n\\t\\t\\t\\tattributes.epochsElapsed($.epochs.currentEpoch())\\n\\t\\t\\t);\\n\\n\\t\\tPair pair = Pair(\\n\\t\\t\\tPriceOracle(OracleLibrary.oracleAddress($.router)).pairFor(\\n\\t\\t\\t\\tattributes.lpDetails.token0,\\n\\t\\t\\t\\tattributes.lpDetails.token1\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t\\tif (liquidityToReturn < liquidity) {\\n\\t\\t\\taddress feeTo = Router(payable($.router)).feeTo();\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tfeeTo != address(0) && feeTo != address(this),\\n\\t\\t\\t\\t\\\"Governance: INVALID_FEE_TO_ADDRESS\\\"\\n\\t\\t\\t);\\n\\n\\t\\t\\tpair.transfer(feeTo, liquidity - liquidityToReturn);\\n\\n\\t\\t\\t// Adjust slippage accordingly\\n\\t\\t\\tamount0Min = (amount0Min * liquidityToReturn) / liquidity;\\n\\t\\t\\tamount1Min = (amount1Min * liquidityToReturn) / liquidity;\\n\\t\\t}\\n\\n\\t\\t// Transfer LP tokens back to the user\\n\\t\\tpair.approve($.router, liquidityToReturn);\\n\\t\\t(uint256 amount0, uint256 amount1) = Router(payable($.router)).removeLiquidity(\\n\\t\\t\\tattributes.lpDetails.token0,\\n\\t\\t\\tattributes.lpDetails.token1,\\n\\t\\t\\tliquidityToReturn,\\n\\t\\t\\tamount0Min,\\n\\t\\t\\tamount1Min,\\n\\t\\t\\taddress(this),\\n\\t\\t\\tblock.timestamp + 1\\n\\t\\t);\\n\\n\\t\\t// Set these values to 0 and updating the atttributes at nonce effectively burns the token\\n\\t\\tattributes.lpDetails.liquidity = 0;\\n\\t\\tattributes.lpDetails.liqValue = 0;\\n\\t\\tnonce = GToken($.gtoken).update(user, nonce, attributes);\\n\\n\\t\\tattributes.lpDetails.token0.sendFungibleToken(amount0, user);\\n\\t\\tattributes.lpDetails.token1.sendFungibleToken(amount1, user);\\n\\t}\\n\\n\\t// ******* VIEWS *******\\n\\n\\tfunction getGToken() external view returns (address) {\\n\\t\\treturn _getGovernanceStorage().gtoken;\\n\\t}\\n\\n\\tfunction rewardsReserve() external view returns (uint256) {\\n\\t\\treturn _getGovernanceStorage().rewardsReserve;\\n\\t}\\n\\n\\tfunction rewardPerShare() external view returns (uint256) {\\n\\t\\treturn _getGovernanceStorage().rewardPerShare;\\n\\t}\\n\\n\\tfunction getClaimableRewards(\\n\\t\\taddress user,\\n\\t\\tuint256 nonce\\n\\t) external view returns (uint256 totalClaimable) {\\n\\t\\t(totalClaimable, ) = _calculateClaimableReward(user, nonce);\\n\\t}\\n\\n\\treceive() external payable {}\\n}\\n\",\"keccak256\":\"0x69828b25e00f1a819e88cb7a2343a813fd4584e4726713b02edb2ce8e791b512\",\"license\":\"MIT\"},\"contracts/Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.28;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { OwnableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport { IPair } from \\\"./interfaces/IPair.sol\\\";\\nimport { ISwapFactory } from \\\"./interfaces/ISwapFactory.sol\\\";\\n\\nimport { Math } from \\\"./libraries/Math.sol\\\";\\nimport { UQ112x112 } from \\\"./libraries/UQ112x112.sol\\\";\\n\\nimport { PairERC20 } from \\\"./abstracts/PairERC20.sol\\\";\\n\\nimport \\\"./types.sol\\\";\\n\\ncontract Pair is IPair, PairERC20, OwnableUpgradeable {\\n\\tusing UQ112x112 for uint224;\\n\\n\\tuint constant MINIMUM_LIQUIDITY = 10 ** 3;\\n\\tbytes4 private constant SELECTOR =\\n\\t\\tbytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n\\n\\t/// @custom:storage-location erc7201:gainz.Pair.storage\\n\\tstruct PairStorage {\\n\\t\\taddress router;\\n\\t\\taddress token0;\\n\\t\\taddress token1;\\n\\t\\tuint112 reserve0;\\n\\t\\tuint112 reserve1;\\n\\t\\tuint32 blockTimestampLast;\\n\\t\\tuint price0CumulativeLast;\\n\\t\\tuint price1CumulativeLast;\\n\\t\\tuint kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\\n\\t\\tuint unlocked;\\n\\t}\\n\\t// keccak256(abi.encode(uint256(keccak256(\\\"gainz.Pair.storage\\\")) - 1)) & ~bytes32(uint256(0xff));\\n\\tbytes32 private constant PAIR_STORAGE_LOCATION =\\n\\t\\t0x052a7ca952fd79e6951e1e37bbd8a7a728c978d413c271dcc4d73117e8490200;\\n\\n\\tfunction _getPairStorage() private pure returns (PairStorage storage $) {\\n\\t\\tassembly {\\n\\t\\t\\t$.slot := PAIR_STORAGE_LOCATION\\n\\t\\t}\\n\\t}\\n\\n\\tmodifier lock() {\\n\\t\\tPairStorage storage $ = _getPairStorage();\\n\\n\\t\\trequire($.unlocked == 1, \\\"Pair: LOCKED\\\");\\n\\t\\t$.unlocked = 0;\\n\\t\\t_;\\n\\t\\t$.unlocked = 1;\\n\\t}\\n\\n\\t// called once by the router at time of deployment\\n\\tfunction initialize(address _token0, address _token1) external initializer {\\n\\t\\t__Ownable_init(msg.sender);\\n\\t\\t__PairERC20_init();\\n\\n\\t\\tPairStorage storage $ = _getPairStorage();\\n\\n\\t\\t$.router = msg.sender;\\n\\t\\t$.token0 = _token0;\\n\\t\\t$.token1 = _token1;\\n\\t\\t$.unlocked = 1;\\n\\t}\\n\\n\\t// update reserves and, on the first call per block, price accumulators\\n\\tfunction _update(\\n\\t\\tuint balance0,\\n\\t\\tuint balance1,\\n\\t\\tuint112 reserve0,\\n\\t\\tuint112 reserve1\\n\\t) private {\\n\\t\\tPairStorage storage $ = _getPairStorage();\\n\\n\\t\\trequire(\\n\\t\\t\\tbalance0 <= type(uint112).max && balance1 <= type(uint112).max,\\n\\t\\t\\t\\\"Pair: OVERFLOW\\\"\\n\\t\\t);\\n\\n\\t\\tuint32 blockTimestamp = uint32(block.timestamp % 2 ** 32);\\n\\t\\tuint32 timeElapsed = blockTimestamp - $.blockTimestampLast; // Overflow is intentional here\\n\\n\\t\\tif (timeElapsed > 0 && reserve0 != 0 && reserve1 != 0) {\\n\\t\\t\\t// * never overflows, and + overflow is desired\\n\\t\\t\\t$.price0CumulativeLast +=\\n\\t\\t\\t\\tuint(UQ112x112.encode(reserve1).uqdiv(reserve0)) *\\n\\t\\t\\t\\ttimeElapsed;\\n\\t\\t\\t$.price1CumulativeLast +=\\n\\t\\t\\t\\tuint(UQ112x112.encode(reserve0).uqdiv(reserve1)) *\\n\\t\\t\\t\\ttimeElapsed;\\n\\t\\t}\\n\\n\\t\\t$.reserve0 = uint112(balance0);\\n\\t\\t$.reserve1 = uint112(balance1);\\n\\t\\t$.blockTimestampLast = blockTimestamp;\\n\\t\\temit Sync($.reserve0, $.reserve1);\\n\\t}\\n\\n\\tfunction router() external view returns (address) {\\n\\t\\treturn _getPairStorage().router;\\n\\t}\\n\\n\\tfunction token0() external view returns (address) {\\n\\t\\treturn _getPairStorage().token0;\\n\\t}\\n\\n\\tfunction token1() external view returns (address) {\\n\\t\\treturn _getPairStorage().token1;\\n\\t}\\n\\n\\tfunction getReserves()\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (uint112 reserve0, uint112 reserve1, uint32 _blockTimestampLast)\\n\\t{\\n\\t\\tPairStorage storage $ = _getPairStorage();\\n\\n\\t\\treserve0 = $.reserve0;\\n\\t\\treserve1 = $.reserve1;\\n\\t\\t_blockTimestampLast = $.blockTimestampLast;\\n\\t}\\n\\n\\tfunction _safeTransfer(address token, address to, uint value) private {\\n\\t\\t(bool success, bytes memory data) = token.call(\\n\\t\\t\\tabi.encodeWithSelector(SELECTOR, to, value)\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tsuccess && (data.length == 0 || abi.decode(data, (bool))),\\n\\t\\t\\t\\\"Pair: TRANSFER_FAILED\\\"\\n\\t\\t);\\n\\t}\\n\\n\\tfunction price0CumulativeLast() external view returns (uint256) {\\n\\t\\treturn _getPairStorage().price0CumulativeLast;\\n\\t}\\n\\n\\tfunction price1CumulativeLast() external view returns (uint256) {\\n\\t\\treturn _getPairStorage().price1CumulativeLast;\\n\\t}\\n\\n\\t// this low-level function should be called from a contract which performs important safety checks\\n\\tfunction mint(address to) external lock onlyOwner returns (uint liquidity) {\\n\\t\\tPairStorage storage $ = _getPairStorage();\\n\\n\\t\\t(uint112 reserve0, uint112 reserve1, ) = getReserves(); // gas savings\\n\\t\\tuint balance0 = IERC20($.token0).balanceOf(address(this));\\n\\t\\tuint balance1 = IERC20($.token1).balanceOf(address(this));\\n\\t\\tuint amount0 = balance0 - reserve0;\\n\\t\\tuint amount1 = balance1 - reserve1;\\n\\n\\t\\tuint _totalSupply = totalSupply(); // gas savings, must be defined here since totalSupply can update in _mintFee\\n\\t\\tif (_totalSupply == 0) {\\n\\t\\t\\tliquidity = Math.sqrt(amount0 * amount1) - MINIMUM_LIQUIDITY;\\n\\t\\t\\t_mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\n\\t\\t} else {\\n\\t\\t\\tliquidity = Math.min(\\n\\t\\t\\t\\t(amount0 * _totalSupply) / reserve0,\\n\\t\\t\\t\\t(amount1 * _totalSupply) / reserve1\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\trequire(liquidity > 0, \\\"Pair: INSUFFICIENT_LIQUIDITY_MINTED\\\");\\n\\t\\t_mint(to, liquidity);\\n\\n\\t\\t_update(balance0, balance1, reserve0, reserve1);\\n\\t\\temit Mint(msg.sender, amount0, amount1);\\n\\t}\\n\\n\\t// this low-level function should be called from a contract which performs important safety checks\\n\\tfunction burn(\\n\\t\\taddress to\\n\\t) external lock onlyOwner returns (uint amount0, uint amount1) {\\n\\t\\tPairStorage storage $ = _getPairStorage();\\n\\n\\t\\t(uint112 _reserve0, uint112 _reserve1) = ($.reserve0, $.reserve1); // gas savings\\n\\t\\taddress _token0 = $.token0; // gas savings\\n\\t\\taddress _token1 = $.token1; // gas savings\\n\\t\\tuint balance0 = IERC20(_token0).balanceOf(address(this));\\n\\t\\tuint balance1 = IERC20(_token1).balanceOf(address(this));\\n\\t\\tuint liquidity = balanceOf(address(this));\\n\\n\\t\\tuint _totalSupply = totalSupply(); // gas savings, must be defined here since totalSupply can update in _mintFee\\n\\t\\tamount0 = (liquidity * balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n\\t\\tamount1 = (liquidity * balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n\\t\\trequire(\\n\\t\\t\\tamount0 > 0 && amount1 > 0,\\n\\t\\t\\t\\\"PairV2: INSUFFICIENT_LIQUIDITY_BURNED\\\"\\n\\t\\t);\\n\\t\\t_burn(address(this), liquidity);\\n\\t\\t_safeTransfer(_token0, to, amount0);\\n\\t\\t_safeTransfer(_token1, to, amount1);\\n\\t\\tbalance0 = IERC20(_token0).balanceOf(address(this));\\n\\t\\tbalance1 = IERC20(_token1).balanceOf(address(this));\\n\\n\\t\\t_update(balance0, balance1, _reserve0, _reserve1);\\n\\t\\temit Burn(msg.sender, amount0, amount1, to);\\n\\t}\\n\\n\\tfunction swap(\\n\\t\\tuint amount0Out,\\n\\t\\tuint amount1Out,\\n\\t\\taddress to\\n\\t) external lock onlyOwner {\\n\\t\\trequire(\\n\\t\\t\\tamount0Out > 0 || amount1Out > 0,\\n\\t\\t\\t\\\"GainzSwap: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n\\t\\t);\\n\\t\\t(uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n\\t\\trequire(\\n\\t\\t\\tamount0Out < _reserve0 && amount1Out < _reserve1,\\n\\t\\t\\t\\\"GainzSwap: INSUFFICIENT_LIQUIDITY\\\"\\n\\t\\t);\\n\\n\\t\\tuint balance0;\\n\\t\\tuint balance1;\\n\\t\\t{\\n\\t\\t\\tPairStorage storage $ = _getPairStorage();\\n\\n\\t\\t\\t// scope for _token{0,1}, avoids stack too deep errors\\n\\t\\t\\taddress _token0 = $.token0;\\n\\t\\t\\taddress _token1 = $.token1;\\n\\t\\t\\trequire(to != _token0 && to != _token1, \\\"GainzSwap: INVALID_TO\\\");\\n\\t\\t\\tif (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n\\t\\t\\tif (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n\\n\\t\\t\\tbalance0 = IERC20(_token0).balanceOf(address(this));\\n\\t\\t\\tbalance1 = IERC20(_token1).balanceOf(address(this));\\n\\t\\t}\\n\\n\\t\\tuint amount0In = balance0 > _reserve0 - amount0Out\\n\\t\\t\\t? balance0 - (_reserve0 - amount0Out)\\n\\t\\t\\t: 0;\\n\\t\\tuint amount1In = balance1 > _reserve1 - amount1Out\\n\\t\\t\\t? balance1 - (_reserve1 - amount1Out)\\n\\t\\t\\t: 0;\\n\\t\\trequire(\\n\\t\\t\\tamount0In > 0 || amount1In > 0,\\n\\t\\t\\t\\\"GainzSwap: INSUFFICIENT_INPUT_AMOUNT\\\"\\n\\t\\t);\\n\\n\\t\\trequire(\\n\\t\\t\\tbalance0 * balance1 >= uint(_reserve0) * uint(_reserve1),\\n\\t\\t\\t\\\"GainzSwap: K\\\"\\n\\t\\t);\\n\\n\\t\\t_update(balance0, balance1, _reserve0, _reserve1);\\n\\t\\temit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n\\t}\\n\\n\\tfunction sync() external {\\n\\t\\tPairStorage storage $ = _getPairStorage();\\n\\n\\t\\t_update(\\n\\t\\t\\tIERC20($.token0).balanceOf(address(this)),\\n\\t\\t\\tIERC20($.token1).balanceOf(address(this)),\\n\\t\\t\\t$.reserve0,\\n\\t\\t\\t$.reserve1\\n\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0x08a412b194fbff1f61ba6107f3d1abb97427e21ad18f3823fae4e5b7f6c26ce1\",\"license\":\"GPL-3.0-or-later\"},\"contracts/PriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.28;\\n\\nimport { FixedPoint } from \\\"./libraries/FixedPoint.sol\\\";\\nimport { AMMLibrary } from \\\"./libraries/AMMLibrary.sol\\\";\\nimport { OracleLibrary } from \\\"./libraries/OracleLibrary.sol\\\";\\n\\nimport { IPair } from \\\"./interfaces/IPair.sol\\\";\\n\\nimport { IRouter } from \\\"./interfaces/IRouter.sol\\\";\\n\\nimport \\\"./types.sol\\\";\\n\\n// fixed window oracle that recomputes the average price for the entire period once every period\\n// note that the price average is only guaranteed to be over at least 1 period, but may be over a longer period\\ncontract PriceOracle {\\n\\tusing FixedPoint for *;\\n\\n\\tuint public constant PERIOD = 60 minutes;\\n\\n\\taddress public immutable router;\\n\\taddress public immutable pairsBeacon;\\n\\n\\tmapping(address => address) public token0;\\n\\tmapping(address => address) public token1;\\n\\n\\tmapping(address => uint) public price0CumulativeLast;\\n\\tmapping(address => uint) public price1CumulativeLast;\\n\\tmapping(address => uint32) public blockTimestampLast;\\n\\tmapping(address => FixedPoint.uq112x112) public price0Average;\\n\\tmapping(address => FixedPoint.uq112x112) public price1Average;\\n\\n\\tconstructor() {\\n\\t\\trouter = msg.sender;\\n\\t\\tpairsBeacon = IRouter(router).getPairsBeacon();\\n\\t}\\n\\n\\tfunction add(address tokenA, address tokenB) external {\\n\\t\\taddress pair = pairFor(tokenA, tokenB);\\n\\t\\tIPair _pair = IPair(pair);\\n\\n\\t\\ttoken0[pair] = _pair.token0();\\n\\t\\ttoken1[pair] = _pair.token1();\\n\\t\\tprice0CumulativeLast[pair] = _pair.price0CumulativeLast(); // fetch the current accumulated price value (1 / 0)\\n\\t\\tprice1CumulativeLast[pair] = _pair.price1CumulativeLast(); // fetch the current accumulated price value (0 / 1)\\n\\t\\tuint112 reserve0;\\n\\t\\tuint112 reserve1;\\n\\t\\t(reserve0, reserve1, blockTimestampLast[pair]) = _pair.getReserves();\\n\\t\\trequire(reserve0 != 0 && reserve1 != 0, \\\"PriceOracle: NO_RESERVES\\\"); // ensure that there's liquidity in the pair\\n\\t}\\n\\n\\tfunction pairFor(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB\\n\\t) public view returns (address) {\\n\\t\\treturn AMMLibrary.pairFor(router, pairsBeacon, tokenA, tokenB);\\n\\t}\\n\\n\\tfunction update(address pair) public {\\n\\t\\t(\\n\\t\\t\\tuint price0Cumulative,\\n\\t\\t\\tuint price1Cumulative,\\n\\t\\t\\tuint32 blockTimestamp\\n\\t\\t) = OracleLibrary.currentCumulativePrices(pair);\\n\\t\\tuint32 timeElapsed = blockTimestamp - blockTimestampLast[pair]; // overflow is desired\\n\\n\\t\\t// silently fail if period not elapsed\\n\\t\\tif (\\n\\t\\t\\tprice0Average[pair].mul(1).decode144() != 0 &&\\n\\t\\t\\tprice1Average[pair].mul(1).decode144() != 0 &&\\n\\t\\t\\ttimeElapsed < PERIOD\\n\\t\\t) return;\\n\\n\\t\\t// overflow is desired, casting never truncates\\n\\t\\t// cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\\n\\t\\tprice0Average[pair] = FixedPoint.uq112x112(\\n\\t\\t\\tuint224(\\n\\t\\t\\t\\t(price0Cumulative - price0CumulativeLast[pair]) / timeElapsed\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\tprice1Average[pair] = FixedPoint.uq112x112(\\n\\t\\t\\tuint224(\\n\\t\\t\\t\\t(price1Cumulative - price1CumulativeLast[pair]) / timeElapsed\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t\\tprice0CumulativeLast[pair] = price0Cumulative;\\n\\t\\tprice1CumulativeLast[pair] = price1Cumulative;\\n\\t\\tblockTimestampLast[pair] = blockTimestamp;\\n\\t}\\n\\n\\t// note this will always return 0 before update has been called successfully for the first time.\\n\\tfunction _consult(\\n\\t\\taddress pair,\\n\\t\\taddress token,\\n\\t\\tuint amountIn\\n\\t) internal view returns (uint amountOut) {\\n\\t\\tif (token == token0[pair]) {\\n\\t\\t\\tamountOut = price0Average[pair].mul(amountIn).decode144();\\n\\t\\t} else {\\n\\t\\t\\trequire(token == token1[pair], \\\"PriceOracle: INVALID_TOKEN\\\");\\n\\t\\t\\tamountOut = price1Average[pair].mul(amountIn).decode144();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction consult(\\n\\t\\taddress tokenIn,\\n\\t\\taddress tokenOut,\\n\\t\\tuint amountIn\\n\\t) external view returns (uint) {\\n\\t\\taddress pair = AMMLibrary.pairFor(\\n\\t\\t\\trouter,\\n\\t\\t\\tpairsBeacon,\\n\\t\\t\\ttokenIn,\\n\\t\\t\\ttokenOut\\n\\t\\t);\\n\\n\\t\\treturn _consult(pair, tokenIn, amountIn);\\n\\t}\\n\\n\\tfunction updateAndConsult(\\n\\t\\taddress tokenIn,\\n\\t\\taddress tokenOut,\\n\\t\\tuint amountIn\\n\\t) external returns (uint) {\\n\\t\\taddress pair = AMMLibrary.pairFor(\\n\\t\\t\\trouter,\\n\\t\\t\\tpairsBeacon,\\n\\t\\t\\ttokenIn,\\n\\t\\t\\ttokenOut\\n\\t\\t);\\n\\t\\tupdate(pair);\\n\\n\\t\\treturn _consult(pair, tokenIn, amountIn);\\n\\t}\\n}\\n\",\"keccak256\":\"0x124f0d27b0d18e66fb6fca97db21cfd965620420990d0614022a0918c1208229\",\"license\":\"GPL-3.0-or-later\"},\"contracts/Router.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.28;\\n\\nimport { OwnableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport { TransparentUpgradeableProxy } from \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\nimport { UpgradeableBeacon } from \\\"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\\\";\\n\\nimport { SwapFactory } from \\\"./abstracts/SwapFactory.sol\\\";\\nimport { UserModule } from \\\"./abstracts/UserModule.sol\\\";\\n\\nimport { IRouter } from \\\"./interfaces/IRouter.sol\\\";\\nimport { IPair } from \\\"./interfaces/IPair.sol\\\";\\n\\nimport { TokenPayment, TokenPayments } from \\\"./libraries/TokenPayments.sol\\\";\\nimport { OracleLibrary } from \\\"./libraries/OracleLibrary.sol\\\";\\nimport { DeployGovernance } from \\\"./libraries/DeployGovernance.sol\\\";\\nimport { DeployPriceOracle } from \\\"./libraries/DeployPriceOracle.sol\\\";\\nimport { DeployWNTV } from \\\"./libraries/DeployWNTV.sol\\\";\\nimport { AMMLibrary } from \\\"./libraries/AMMLibrary.sol\\\";\\nimport { TransferHelper } from \\\"./libraries/TransferHelper.sol\\\";\\nimport { Epochs } from \\\"./libraries/Epochs.sol\\\";\\n\\nimport { WNTV } from \\\"./tokens/WNTV.sol\\\";\\n\\nimport { Governance } from \\\"./Governance.sol\\\";\\nimport { PriceOracle } from \\\"./PriceOracle.sol\\\";\\nimport { Pair, IERC20 } from \\\"./Pair.sol\\\";\\n\\nimport \\\"./types.sol\\\";\\nimport \\\"./errors.sol\\\";\\n\\nlibrary RouterLib {\\n\\tusing TokenPayments for TokenPayment;\\n\\n\\tfunction _addLiquidity(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\tuint amountADesired,\\n\\t\\tuint amountBDesired,\\n\\t\\tuint amountAMin,\\n\\t\\tuint amountBMin,\\n\\t\\taddress pair\\n\\t) internal view returns (uint amountA, uint amountB) {\\n\\t\\tif (pair == address(0)) {\\n\\t\\t\\trevert Router.PairNotListed(tokenA, tokenB);\\n\\t\\t}\\n\\n\\t\\t(uint reserveA, uint reserveB, ) = IPair(pair).getReserves();\\n\\t\\tif (reserveA == 0 && reserveB == 0) {\\n\\t\\t\\t(amountA, amountB) = (amountADesired, amountBDesired);\\n\\t\\t} else {\\n\\t\\t\\tuint amountBOptimal = AMMLibrary.quote(\\n\\t\\t\\t\\tamountADesired,\\n\\t\\t\\t\\treserveA,\\n\\t\\t\\t\\treserveB\\n\\t\\t\\t);\\n\\t\\t\\tif (amountBOptimal <= amountBDesired) {\\n\\t\\t\\t\\tif (amountBOptimal < amountBMin)\\n\\t\\t\\t\\t\\trevert Router.InSufficientBAmount();\\n\\t\\t\\t\\t(amountA, amountB) = (amountADesired, amountBOptimal);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tuint amountAOptimal = AMMLibrary.quote(\\n\\t\\t\\t\\t\\tamountBDesired,\\n\\t\\t\\t\\t\\treserveB,\\n\\t\\t\\t\\t\\treserveA\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\tassert(amountAOptimal <= amountADesired);\\n\\t\\t\\t\\tif (amountAOptimal < amountAMin)\\n\\t\\t\\t\\t\\trevert Router.InSufficientAAmount();\\n\\t\\t\\t\\t(amountA, amountB) = (amountAOptimal, amountBDesired);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _mintLiquidity(\\n\\t\\tTokenPayment memory paymentA,\\n\\t\\tTokenPayment memory paymentB,\\n\\t\\taddress pair,\\n\\t\\taddress wNativeToken\\n\\t) internal returns (uint liquidity) {\\n\\t\\t// Prepare payment{A,B} for reception\\n\\t\\tif (paymentA.token == wNativeToken && msg.value == paymentA.amount) {\\n\\t\\t\\tpaymentA.token = address(0);\\n\\t\\t} else if (\\n\\t\\t\\tpaymentB.token == wNativeToken && msg.value == paymentB.amount\\n\\t\\t) {\\n\\t\\t\\tpaymentB.token = address(0);\\n\\t\\t}\\n\\n\\t\\tpaymentA.receiveTokenFor(msg.sender, pair, wNativeToken);\\n\\t\\tpaymentB.receiveTokenFor(msg.sender, pair, wNativeToken);\\n\\n\\t\\tliquidity = IPair(pair).mint(msg.sender);\\n\\t}\\n\\n\\tfunction addLiquidity(\\n\\t\\tTokenPayment memory paymentA,\\n\\t\\tTokenPayment memory paymentB,\\n\\t\\tuint amountAMin,\\n\\t\\tuint amountBMin,\\n\\t\\taddress pair,\\n\\t\\taddress wNativeToken\\n\\t) external returns (uint amountA, uint amountB, uint liquidity) {\\n\\t\\t(amountA, amountB) = _addLiquidity(\\n\\t\\t\\tpaymentA.token,\\n\\t\\t\\tpaymentB.token,\\n\\t\\t\\tpaymentA.amount,\\n\\t\\t\\tpaymentB.amount,\\n\\t\\t\\tamountAMin,\\n\\t\\t\\tamountBMin,\\n\\t\\t\\tpair\\n\\t\\t);\\n\\n\\t\\tliquidity = _mintLiquidity(paymentA, paymentB, pair, wNativeToken);\\n\\t}\\n}\\n\\ncontract Router is\\n\\tIRouter,\\n\\tSwapFactory,\\n\\tOwnableUpgradeable,\\n\\tUserModule,\\n\\tErrors\\n{\\n\\tusing TokenPayments for TokenPayment;\\n\\tusing TokenPayments for address;\\n\\tusing Epochs for Epochs.Storage;\\n\\n\\t/// @custom:storage-location erc7201:gainz.Router.storage\\n\\tstruct RouterStorage {\\n\\t\\taddress feeTo;\\n\\t\\taddress feeToSetter;\\n\\t\\t//\\n\\t\\taddress wNativeToken;\\n\\t\\taddress proxyAdmin;\\n\\t\\taddress pairsBeacon;\\n\\t\\taddress governance;\\n\\t\\tEpochs.Storage epochs;\\n\\t}\\n\\n\\t// keccak256(abi.encode(uint256(keccak256(\\\"gainz.Router.storage\\\")) - 1)) & ~bytes32(uint256(0xff));\\n\\tbytes32 private constant ROUTER_STORAGE_LOCATION =\\n\\t\\t0xae974aecfb7025a5d7fc4d7e9ba067575060084b22f04fa48d6bbae6c0d48d00;\\n\\n\\tfunction _getRouterStorage()\\n\\t\\tprivate\\n\\t\\tpure\\n\\t\\treturns (RouterStorage storage $)\\n\\t{\\n\\t\\tassembly {\\n\\t\\t\\t$.slot := ROUTER_STORAGE_LOCATION\\n\\t\\t}\\n\\t}\\n\\n\\terror CreatePairUnauthorized();\\n\\tmodifier canCreatePair() {\\n\\t\\tRouterStorage storage $ = _getRouterStorage();\\n\\n\\t\\tif (msg.sender != owner() && msg.sender != $.governance)\\n\\t\\t\\trevert CreatePairUnauthorized();\\n\\t\\t_;\\n\\t}\\n\\n\\t// **** INITIALIZATION ****\\n\\n\\tfunction initialize(address initialOwner) public initializer {\\n\\t\\t__Ownable_init(initialOwner);\\n\\t}\\n\\n\\tfunction runInit(address gainzToken) public onlyOwner {\\n\\t\\tRouterStorage storage $ = _getRouterStorage();\\n\\n\\t\\trequire($.proxyAdmin == address(0), \\\"already initialised\\\");\\n\\n\\t\\t$.feeToSetter = $.feeTo = owner();\\n\\t\\t$.proxyAdmin = msg.sender;\\n\\t\\t$.epochs.initialize(24 hours);\\n\\n\\t\\t// Deploy the UpgradeableBeacon contract\\n\\t\\t$.pairsBeacon = address(\\n\\t\\t\\tnew UpgradeableBeacon(address(new Pair()), $.proxyAdmin)\\n\\t\\t);\\n\\n\\t\\t// set Wrapped Native Token;\\n\\t\\t$.wNativeToken = DeployWNTV.create($.proxyAdmin);\\n\\n\\t\\t_setGovernance(gainzToken);\\n\\t\\tsetPriceOracle();\\n\\t}\\n\\n\\tfunction _setGovernance(address gainzToken) internal {\\n\\t\\tRouterStorage storage $ = _getRouterStorage();\\n\\n\\t\\t$.governance = DeployGovernance.create(\\n\\t\\t\\t$.epochs,\\n\\t\\t\\tgainzToken,\\n\\t\\t\\t$.wNativeToken,\\n\\t\\t\\t$.proxyAdmin\\n\\t\\t);\\n\\t}\\n\\n\\tfunction setPriceOracle() public {\\n\\t\\tassert(\\n\\t\\t\\tOracleLibrary.oracleAddress(address(this)) ==\\n\\t\\t\\t\\tDeployPriceOracle.create()\\n\\t\\t);\\n\\t}\\n\\n\\t// **** END INITIALIZATION ****\\n\\n\\tfunction createPair(\\n\\t\\tTokenPayment memory paymentA,\\n\\t\\tTokenPayment memory paymentB\\n\\t)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\toverride\\n\\t\\tcanCreatePair\\n\\t\\treturns (address pairAddress, uint256 liquidity)\\n\\t{\\n\\t\\tpairAddress = _createPair(\\n\\t\\t\\tpaymentA.token,\\n\\t\\t\\tpaymentB.token,\\n\\t\\t\\t_getRouterStorage().pairsBeacon\\n\\t\\t);\\n\\t\\t(, , liquidity, ) = addLiquidity(\\n\\t\\t\\tpaymentA,\\n\\t\\t\\tpaymentB,\\n\\t\\t\\t0,\\n\\t\\t\\t0,\\n\\t\\t\\tblock.timestamp + 1\\n\\t\\t);\\n\\n\\t\\tPriceOracle(OracleLibrary.oracleAddress(address(this))).add(\\n\\t\\t\\tpaymentA.token == address(0)\\n\\t\\t\\t\\t? getWrappedNativeToken()\\n\\t\\t\\t\\t: paymentA.token,\\n\\t\\t\\tpaymentB.token == address(0)\\n\\t\\t\\t\\t? getWrappedNativeToken()\\n\\t\\t\\t\\t: paymentB.token\\n\\t\\t);\\n\\t}\\n\\n\\t// **** SWAP ****\\n\\n\\terror Expired();\\n\\n\\tmodifier ensure(uint deadline) {\\n\\t\\tif (deadline < block.timestamp) revert Expired();\\n\\t\\t_;\\n\\t}\\n\\n\\taddress _originalCaller;\\n\\tmodifier captureOriginalCaller() {\\n\\t\\tassert(_originalCaller == address(0));\\n\\t\\t_originalCaller = msg.sender;\\n\\t\\t_;\\n\\t\\t_originalCaller = address(0);\\n\\t}\\n\\n\\tfunction registerAndSwap(\\n\\t\\tuint256 referrerId,\\n\\t\\tbytes calldata swapData\\n\\t) external payable captureOriginalCaller {\\n\\t\\t// Step 1: Register user or get existing user ID\\n\\t\\t_createOrGetUserId(msg.sender, referrerId);\\n\\n\\t\\t// Step 2: Execute swap based on swapData with assembly to capture errors\\n\\t\\t(bool success, bytes memory returnData) = address(this).call{\\n\\t\\t\\tvalue: msg.value\\n\\t\\t}(swapData);\\n\\n\\t\\t// Inline assembly to handle errors\\n\\t\\tassembly {\\n\\t\\t\\t// If the call failed, check if there is return data (error message)\\n\\t\\t\\tif iszero(success) {\\n\\t\\t\\t\\tif gt(mload(returnData), 0) {\\n\\t\\t\\t\\t\\t// Revert with the actual error message from the failed call\\n\\t\\t\\t\\t\\trevert(add(returnData, 32), mload(returnData))\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// If there is no return data, revert with a generic message\\n\\t\\t\\t\\trevert(0, 0)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t// requires the initial amount to have already been sent to the first pair\\n\\tfunction _swap(\\n\\t\\tuint[] memory amounts,\\n\\t\\taddress[] memory path,\\n\\t\\taddress _to\\n\\t) internal virtual {\\n\\t\\tfor (uint i; i < path.length - 1; i++) {\\n\\t\\t\\t(address input, address output) = (path[i], path[i + 1]);\\n\\t\\t\\t(address token0, ) = AMMLibrary.sortTokens(input, output);\\n\\t\\t\\tuint amountOut = amounts[i + 1];\\n\\t\\t\\t(uint amount0Out, uint amount1Out) = input == token0\\n\\t\\t\\t\\t? (uint(0), amountOut)\\n\\t\\t\\t\\t: (amountOut, uint(0));\\n\\t\\t\\taddress to = i < path.length - 2\\n\\t\\t\\t\\t? AMMLibrary.pairFor(\\n\\t\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\t\\tgetPairsBeacon(),\\n\\t\\t\\t\\t\\toutput,\\n\\t\\t\\t\\t\\tpath[i + 2]\\n\\t\\t\\t\\t)\\n\\t\\t\\t\\t: _to;\\n\\t\\t\\tIPair(\\n\\t\\t\\t\\tAMMLibrary.pairFor(\\n\\t\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\t\\tgetPairsBeacon(),\\n\\t\\t\\t\\t\\tinput,\\n\\t\\t\\t\\t\\toutput\\n\\t\\t\\t\\t)\\n\\t\\t\\t).swap(amount0Out, amount1Out, to);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction swapExactTokensForTokens(\\n\\t\\tuint amountIn,\\n\\t\\tuint amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\tvirtual\\n\\t\\tensure(deadline)\\n\\t\\treturns (uint[] memory amounts)\\n\\t{\\n\\t\\tamounts = AMMLibrary.getAmountsOut(\\n\\t\\t\\taddress(this),\\n\\t\\t\\tgetPairsBeacon(),\\n\\t\\t\\tamountIn,\\n\\t\\t\\tpath\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tamounts[amounts.length - 1] >= amountOutMin,\\n\\t\\t\\t\\\"Router: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n\\t\\t);\\n\\n\\t\\tWNTV wNtv = WNTV(getWrappedNativeToken());\\n\\n\\t\\t{\\n\\t\\t\\t// Send token scope\\n\\t\\t\\taddress pair = AMMLibrary.pairFor(\\n\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\tgetPairsBeacon(),\\n\\t\\t\\t\\tpath[0],\\n\\t\\t\\t\\tpath[1]\\n\\t\\t\\t);\\n\\t\\t\\tif (msg.value > 0) {\\n\\t\\t\\t\\trequire(\\n\\t\\t\\t\\t\\tmsg.value == amountIn,\\n\\t\\t\\t\\t\\t\\\"Router: INVALID_AMOUNT_IN_VALUES\\\"\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\trequire(\\n\\t\\t\\t\\t\\tpath[0] == getWrappedNativeToken(),\\n\\t\\t\\t\\t\\t\\\"Router: INVALID_PATH\\\"\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\twNtv.receiveFor{ value: msg.value }(pair);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tTransferHelper.safeTransferFrom(\\n\\t\\t\\t\\t\\tpath[0],\\n\\t\\t\\t\\t\\t_originalCaller == address(0)\\n\\t\\t\\t\\t\\t\\t? msg.sender\\n\\t\\t\\t\\t\\t\\t: _originalCaller,\\n\\t\\t\\t\\t\\tpair,\\n\\t\\t\\t\\t\\tamounts[0]\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Swap and prepare to unWrap Native if needed\\n\\t\\tbool autoUnwrap = to != _getRouterStorage().governance &&\\n\\t\\t\\tpath[path.length - 1] == address(wNtv);\\n\\t\\t_swap(amounts, path, autoUnwrap ? address(this) : to);\\n\\t\\tif (autoUnwrap)\\n\\t\\t\\tpath[path.length - 1].sendFungibleToken(\\n\\t\\t\\t\\tamounts[path.length - 1],\\n\\t\\t\\t\\tto\\n\\t\\t\\t);\\n\\t}\\n\\n\\t// **** ADD LIQUIDITY ****\\n\\n\\terror PairNotListed(address tokenA, address tokenB);\\n\\terror InSufficientAAmount();\\n\\terror InSufficientBAmount();\\n\\n\\tfunction addLiquidity(\\n\\t\\tTokenPayment memory paymentA,\\n\\t\\tTokenPayment memory paymentB,\\n\\t\\tuint amountAMin,\\n\\t\\tuint amountBMin,\\n\\t\\tuint deadline\\n\\t)\\n\\t\\tpublic\\n\\t\\tpayable\\n\\t\\tvirtual\\n\\t\\tensure(deadline)\\n\\t\\tcanCreatePair\\n\\t\\treturns (uint amountA, uint amountB, uint liquidity, address pair)\\n\\t{\\n\\t\\tpair = getPair(paymentA.token, paymentB.token);\\n\\n\\t\\t(amountA, amountB, liquidity) = RouterLib.addLiquidity(\\n\\t\\t\\tpaymentA,\\n\\t\\t\\tpaymentB,\\n\\t\\t\\tamountAMin,\\n\\t\\t\\tamountBMin,\\n\\t\\t\\tpair,\\n\\t\\t\\tgetWrappedNativeToken()\\n\\t\\t);\\n\\t}\\n\\n\\tfunction removeLiquidity(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\tuint liquidity,\\n\\t\\tuint amountAMin,\\n\\t\\tuint amountBMin,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t)\\n\\t\\texternal\\n\\t\\tensure(deadline)\\n\\t\\tcanCreatePair\\n\\t\\treturns (uint amountA, uint amountB)\\n\\t{\\n\\t\\taddress pair = getPair(tokenA, tokenB);\\n\\t\\trequire(pair != address(0), \\\"Router: INVALID_PAIR\\\");\\n\\n\\t\\t// Transfer liquidity tokens from the sender to the pair\\n\\t\\tPair(pair).transferFrom(msg.sender, pair, liquidity);\\n\\n\\t\\t// Burn liquidity tokens to receive tokenA and tokenB\\n\\t\\t(uint amount0, uint amount1) = IPair(pair).burn(to);\\n\\t\\t(address token0, ) = AMMLibrary.sortTokens(tokenA, tokenB);\\n\\t\\t(amountA, amountB) = tokenA == token0\\n\\t\\t\\t? (amount0, amount1)\\n\\t\\t\\t: (amount1, amount0);\\n\\n\\t\\t// Ensure minimum amounts are met\\n\\t\\tif (amountA < amountAMin) revert InSufficientAAmount();\\n\\t\\tif (amountB < amountBMin) revert InSufficientBAmount();\\n\\t}\\n\\n\\t// ******* VIEWS *******\\n\\n\\tfunction getWrappedNativeToken() public view returns (address) {\\n\\t\\treturn _getRouterStorage().wNativeToken;\\n\\t}\\n\\n\\tfunction getPairsBeacon() public view returns (address) {\\n\\t\\treturn _getRouterStorage().pairsBeacon;\\n\\t}\\n\\n\\tfunction getGovernance() external view returns (address) {\\n\\t\\treturn _getRouterStorage().governance;\\n\\t}\\n\\n\\tfunction feeTo() external view returns (address) {\\n\\t\\treturn _getRouterStorage().feeTo;\\n\\t}\\n\\n\\tfunction feeToSetter() public view returns (address) {\\n\\t\\treturn _getRouterStorage().feeToSetter;\\n\\t}\\n\\n\\tfunction setFeeTo(address _feeTo) external {\\n\\t\\trequire(msg.sender == feeToSetter(), \\\"Router: FORBIDDEN\\\");\\n\\t\\t_getRouterStorage().feeTo = _feeTo;\\n\\t}\\n\\n\\tfunction setFeeToSetter(address _feeToSetter) external {\\n\\t\\trequire(msg.sender == feeToSetter(), \\\"Router: FORBIDDEN\\\");\\n\\t\\t_getRouterStorage().feeToSetter = _feeToSetter;\\n\\t}\\n\\n\\treceive() external payable {}\\n}\\n\",\"keccak256\":\"0x0c3c565f4e96c152224ee9a544559f28fe00b692d0acd16a1910794fef21ac1f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/abstracts/PairERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport { IERC20Errors } from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\n\\nabstract contract PairERC20 is Initializable, IERC20, IERC20Errors {\\n\\tstring public constant name = \\\"GainzLP\\\";\\n\\tstring public constant symbol = \\\"GNZ-LP\\\";\\n\\tuint8 public constant decimals = 18;\\n\\n\\t/// @custom:storage-location erc7201:gainz.PairERC20.storage\\n\\tstruct PairERC20Storage {\\n\\t\\tuint totalSupply;\\n\\t\\tmapping(address => uint) balanceOf;\\n\\t\\tmapping(address => mapping(address => uint)) allowance;\\n\\t\\tbytes32 domainSeperator;\\n\\t}\\n\\t// keccak256(abi.encode(uint256(keccak256(\\\"gainz.PairERC20.storage\\\")) - 1)) & ~bytes32(uint256(0xff));\\n\\tbytes32 private constant PAIR_ERC20_STORAGE_LOCATION =\\n\\t\\t0x0053e124b05349f2255dde42e8688e7f08d28e98ecf44867b1f7ffaee445dc00;\\n\\n\\tfunction _getPairERC20Storage()\\n\\t\\tprivate\\n\\t\\tpure\\n\\t\\treturns (PairERC20Storage storage $)\\n\\t{\\n\\t\\tassembly {\\n\\t\\t\\t$.slot := PAIR_ERC20_STORAGE_LOCATION\\n\\t\\t}\\n\\t}\\n\\n\\tfunction DOMAIN_SEPARATOR() public view returns (bytes32) {\\n\\t\\treturn _getPairERC20Storage().domainSeperator;\\n\\t}\\n\\n\\t// keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\tbytes32 public constant PERMIT_TYPEHASH =\\n\\t\\t0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\tmapping(address => uint) public nonces;\\n\\n\\t// called once by the Router at time of deployment\\n\\tfunction __PairERC20_init() internal onlyInitializing {\\n\\t\\tPairERC20Storage storage $ = _getPairERC20Storage();\\n\\n\\t\\tuint chainId;\\n\\t\\tassembly {\\n\\t\\t\\tchainId := chainid()\\n\\t\\t}\\n\\t\\t$.domainSeperator = keccak256(\\n\\t\\t\\tabi.encode(\\n\\t\\t\\t\\tkeccak256(\\n\\t\\t\\t\\t\\t\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n\\t\\t\\t\\t),\\n\\t\\t\\t\\tkeccak256(bytes(name)),\\n\\t\\t\\t\\tkeccak256(bytes(\\\"1\\\")),\\n\\t\\t\\t\\tchainId,\\n\\t\\t\\t\\taddress(this)\\n\\t\\t\\t)\\n\\t\\t);\\n\\t}\\n\\n\\tfunction _mint(address to, uint value) internal {\\n\\t\\tPairERC20Storage storage $ = _getPairERC20Storage();\\n\\n\\t\\t$.totalSupply += (value);\\n\\t\\t$.balanceOf[to] += (value);\\n\\t\\temit Transfer(address(0), to, value);\\n\\t}\\n\\n\\tfunction _burn(address from, uint value) internal {\\n\\t\\tPairERC20Storage storage $ = _getPairERC20Storage();\\n\\n\\t\\t$.balanceOf[from] -= (value);\\n\\t\\t$.totalSupply -= (value);\\n\\t\\temit Transfer(from, address(0), value);\\n\\t}\\n\\n\\tfunction _approve(address owner, address spender, uint value) private {\\n\\t\\tPairERC20Storage storage $ = _getPairERC20Storage();\\n\\t\\t$.allowance[owner][spender] = value;\\n\\t\\temit Approval(owner, spender, value);\\n\\t}\\n\\n\\tfunction _transfer(address from, address to, uint value) private {\\n\\t\\tPairERC20Storage storage $ = _getPairERC20Storage();\\n\\t\\t$.balanceOf[from] -= (value);\\n\\t\\t$.balanceOf[to] += (value);\\n\\t\\temit Transfer(from, to, value);\\n\\t}\\n\\n\\tfunction approve(address spender, uint value) external returns (bool) {\\n\\t\\t_approve(msg.sender, spender, value);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction transfer(address to, uint value) external returns (bool) {\\n\\t\\t_transfer(msg.sender, to, value);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint value\\n\\t) external returns (bool) {\\n\\t\\tPairERC20Storage storage $ = _getPairERC20Storage();\\n\\n\\t\\tuint256 currentAllowance = $.allowance[from][msg.sender];\\n\\t\\tif (currentAllowance < value) {\\n\\t\\t\\trevert ERC20InsufficientAllowance(\\n\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\tcurrentAllowance,\\n\\t\\t\\t\\tvalue\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\t$.allowance[from][msg.sender] -= (value);\\n\\n\\t\\t_transfer(from, to, value);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction permit(\\n\\t\\taddress owner,\\n\\t\\taddress spender,\\n\\t\\tuint value,\\n\\t\\tuint deadline,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external {\\n\\t\\trequire(deadline >= block.timestamp, \\\"PairERC20: EXPIRED\\\");\\n\\t\\tbytes32 digest = keccak256(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\\"\\\\x19\\\\x01\\\",\\n\\t\\t\\t\\tDOMAIN_SEPARATOR(),\\n\\t\\t\\t\\tkeccak256(\\n\\t\\t\\t\\t\\tabi.encode(\\n\\t\\t\\t\\t\\t\\tPERMIT_TYPEHASH,\\n\\t\\t\\t\\t\\t\\towner,\\n\\t\\t\\t\\t\\t\\tspender,\\n\\t\\t\\t\\t\\t\\tvalue,\\n\\t\\t\\t\\t\\t\\tnonces[owner]++,\\n\\t\\t\\t\\t\\t\\tdeadline\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t)\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\taddress recoveredAddress = ecrecover(digest, v, r, s);\\n\\t\\trequire(\\n\\t\\t\\trecoveredAddress != address(0) && recoveredAddress == owner,\\n\\t\\t\\t\\\"PairERC20: INVALID_SIGNATURE\\\"\\n\\t\\t);\\n\\t\\t_approve(owner, spender, value);\\n\\t}\\n\\n\\tfunction totalSupply() public view override returns (uint256) {\\n\\t\\tPairERC20Storage storage $ = _getPairERC20Storage();\\n\\n\\t\\treturn $.totalSupply;\\n\\t}\\n\\n\\tfunction balanceOf(address account) public view override returns (uint256) {\\n\\t\\tPairERC20Storage storage $ = _getPairERC20Storage();\\n\\n\\t\\treturn $.balanceOf[account];\\n\\t}\\n\\n\\tfunction allowance(\\n\\t\\taddress owner,\\n\\t\\taddress spender\\n\\t) public view virtual returns (uint256) {\\n\\t\\tPairERC20Storage storage $ = _getPairERC20Storage();\\n\\n\\t\\treturn $.allowance[owner][spender];\\n\\t}\\n}\\n\",\"keccak256\":\"0x44b5a14ed8e4e2f9da20b288be8f0bcf983a5798bc7735ad5cbb7b34bd6d183f\",\"license\":\"MIT\"},\"contracts/abstracts/SFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport { ERC1155Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\nimport { OwnableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nabstract contract SFT is ERC1155Upgradeable {\\n\\tusing EnumerableSet for EnumerableSet.UintSet;\\n\\n\\terror ActionNotAllowed(address);\\n\\n\\tstruct SftBalance {\\n\\t\\tuint256 nonce;\\n\\t\\tuint256 amount;\\n\\t\\tbytes attributes;\\n\\t}\\n\\n\\t/// @custom:storage-location erc7201:adex.sft.storage\\n\\tstruct SFTStorage {\\n\\t\\tuint256 nonceCounter;\\n\\t\\tmapping(uint256 => bytes) tokenAttributes; // Mapping from nonce to token attributes as bytes\\n\\t\\tmapping(address => EnumerableSet.UintSet) addressToNonces; // Mapping from address to list of owned token nonces\\n\\t\\tmapping(address => bool) updateOperators;\\n\\t\\tstring name;\\n\\t\\tstring symbol;\\n\\t}\\n\\n\\t// keccak256(abi.encode(uint256(keccak256(\\\"adex.sft.storage\\\")) - 1)) & ~bytes32(uint256(0xff));\\n\\tbytes32 private constant SFT_STORAGE_LOCATION =\\n\\t\\t0x62c7181558777c0450efc6bc1cd8d37cd6f6f3ac939cea4e0ebf7ac80730d200;\\n\\n\\tfunction _getSFTStorage() private pure returns (SFTStorage storage s) {\\n\\t\\tassembly {\\n\\t\\t\\ts.slot := SFT_STORAGE_LOCATION\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev Replaces constructor. Initialize the contract with name and symbol.\\n\\t/// @param name_ The name of the SFT token.\\n\\t/// @param symbol_ The symbol of the SFT token.\\n\\tfunction __SFT_init(\\n\\t\\tstring memory name_,\\n\\t\\tstring memory symbol_,\\n\\t\\taddress firstOperator\\n\\t) internal onlyInitializing {\\n\\t\\t__ERC1155_init(\\\"\\\"); // Initialize ERC1155\\n\\t\\tSFTStorage storage $ = _getSFTStorage();\\n\\t\\t$.name = name_;\\n\\t\\t$.symbol = symbol_;\\n\\t\\t$.updateOperators[firstOperator] = true;\\n\\t}\\n\\n\\tmodifier canUpdate() {\\n\\t\\tif (!isOperator(msg.sender)) {\\n\\t\\t\\trevert ActionNotAllowed(msg.sender);\\n\\t\\t}\\n\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction isOperator(address operator) public view returns (bool) {\\n\\t\\treturn _getSFTStorage().updateOperators[operator];\\n\\t}\\n\\n\\t/// @dev Internal function to mint new tokens with attributes and store the nonce.\\n\\tfunction _mint(\\n\\t\\taddress to,\\n\\t\\tuint256 amount,\\n\\t\\tbytes memory attributes\\n\\t) internal returns (uint256 nonce) {\\n\\t\\tSFTStorage storage $ = _getSFTStorage();\\n\\t\\tnonce = ++$.nonceCounter;\\n\\n\\t\\t// $tore the attributes\\n\\t\\t$.tokenAttributes[nonce] = attributes;\\n\\n\\t\\t// Mint the token with the nonce as its ID\\n\\t\\tsuper._mint(to, nonce, amount, \\\"\\\");\\n\\n\\t\\t// Track the nonce for the address\\n\\t\\t$.addressToNonces[to].add(nonce);\\n\\t}\\n\\n\\t/// @dev Returns the name of the token.\\n\\tfunction name() public view returns (string memory) {\\n\\t\\treturn _getSFTStorage().name;\\n\\t}\\n\\n\\t/// @dev Returns the symbol of the token.\\n\\tfunction symbol() public view returns (string memory) {\\n\\t\\treturn _getSFTStorage().symbol;\\n\\t}\\n\\n\\t/// @dev Returns the token name and symbol.\\n\\tfunction tokenInfo() public view returns (string memory, string memory) {\\n\\t\\treturn (name(), symbol());\\n\\t}\\n\\n\\t/// @dev Returns raw token attributes by nonce.\\n\\t/// @param nonce The nonce of the token.\\n\\t/// @return Attributes in bytes.\\n\\tfunction _getRawTokenAttributes(\\n\\t\\tuint256 nonce\\n\\t) internal view returns (bytes memory) {\\n\\t\\treturn _getSFTStorage().tokenAttributes[nonce];\\n\\t}\\n\\n\\t/// @dev Returns the list of nonces owned by an address.\\n\\t/// @param owner The address of the token owner.\\n\\t/// @return Array of nonces.\\n\\tfunction getNonces(address owner) public view returns (uint256[] memory) {\\n\\t\\treturn _getSFTStorage().addressToNonces[owner].values();\\n\\t}\\n\\n\\t/// @dev Checks if the address owns a specific nonce.\\n\\t/// @param owner The address of the token owner.\\n\\t/// @param nonce The nonce to check.\\n\\t/// @return True if the address owns the nonce, otherwise false.\\n\\tfunction hasSFT(address owner, uint256 nonce) public view returns (bool) {\\n\\t\\treturn _getSFTStorage().addressToNonces[owner].contains(nonce);\\n\\t}\\n\\n\\t/// @dev Burns the tokens of a specific nonce and mints new tokens with updated attributes.\\n\\t/// @param user The address of the token holder.\\n\\t/// @param nonce The nonce of the token to update.\\n\\t/// @param amount The amount of tokens to mint.\\n\\t/// @param attr The new attributes to assign.\\n\\t/// @return The new nonce for the minted tokens.\\n\\tfunction update(\\n\\t\\taddress user,\\n\\t\\tuint256 nonce,\\n\\t\\tuint256 amount,\\n\\t\\tbytes memory attr\\n\\t) public canUpdate returns (uint256) {\\n\\t\\t_burn(user, nonce, amount);\\n\\t\\treturn amount > 0 ? _mint(user, amount, attr) : 0;\\n\\t}\\n\\n\\t/// @dev Returns the balance of the user with their token attributes.\\n\\t/// @param user The address of the user.\\n\\t/// @return Array of SftBalance containing nonce, amount, and attributes.\\n\\tfunction _sftBalance(\\n\\t\\taddress user\\n\\t) internal view returns (SftBalance[] memory) {\\n\\t\\tuint256[] memory nonces = getNonces(user);\\n\\t\\tSftBalance[] memory balance = new SftBalance[](nonces.length);\\n\\n\\t\\tfor (uint256 i; i < nonces.length; i++) {\\n\\t\\t\\tuint256 nonce = nonces[i];\\n\\t\\t\\tbytes memory attributes = _getRawTokenAttributes(nonce);\\n\\t\\t\\tuint256 amount = balanceOf(user, nonce);\\n\\n\\t\\t\\tbalance[i] = SftBalance({\\n\\t\\t\\t\\tnonce: nonce,\\n\\t\\t\\t\\tamount: amount,\\n\\t\\t\\t\\tattributes: attributes\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\treturn balance;\\n\\t}\\n\\n\\t/// @dev Override _update to handle address-to-nonce mapping.\\n\\t/// @param from The address sending tokens.\\n\\t/// @param to The address receiving tokens.\\n\\t/// @param ids The token IDs being transferred.\\n\\t/// @param values The values of tokens being transferred.\\n\\tfunction _update(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256[] memory ids,\\n\\t\\tuint256[] memory values\\n\\t) internal virtual override {\\n\\t\\tsuper._update(from, to, ids, values);\\n\\n\\t\\tfor (uint256 i = 0; i < ids.length; i++) {\\n\\t\\t\\tuint256 id = ids[i];\\n\\n\\t\\t\\t_getSFTStorage().addressToNonces[from].remove(id);\\n\\t\\t\\t_getSFTStorage().addressToNonces[to].add(id);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x6b2daba4ab82f71f50422e77879900a85e53de70a4b95379e3ee763effd42977\",\"license\":\"MIT\"},\"contracts/abstracts/SwapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.28;\\n\\nimport { BeaconProxy } from \\\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\\\";\\n\\nimport { ISwapFactory } from \\\"../interfaces/ISwapFactory.sol\\\";\\nimport { IPair } from \\\"../interfaces/IPair.sol\\\";\\n\\nimport { Pair } from \\\"../Pair.sol\\\";\\n\\nabstract contract SwapFactory is ISwapFactory {\\n\\t/// @custom:storage-location erc7201:gainz.SwapFactory.storage\\n\\tstruct SwapFactoryStorage {\\n\\t\\tmapping(address => mapping(address => address)) pairMap;\\n\\t\\taddress[] pairs;\\n\\t}\\n\\t// keccak256(abi.encode(uint256(keccak256(\\\"gainz.SwapFactory.storage\\\")) - 1)) & ~bytes32(uint256(0xff));\\n\\tbytes32 private constant SWAP_FACTORY_STORAGE_LOCATION =\\n\\t\\t0xc4825425231a5778c376b527fa35b881155eeee14e05c41074ff3d19f04f4c00;\\n\\n\\tfunction _getSwapFactoryStorage()\\n\\t\\tprivate\\n\\t\\tpure\\n\\t\\treturns (SwapFactoryStorage storage $)\\n\\t{\\n\\t\\tassembly {\\n\\t\\t\\t$.slot := SWAP_FACTORY_STORAGE_LOCATION\\n\\t\\t}\\n\\t}\\n\\n\\tfunction getPair(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB\\n\\t) public view returns (address) {\\n\\t\\treturn _getSwapFactoryStorage().pairMap[tokenA][tokenB];\\n\\t}\\n\\n\\tfunction pairs() external view returns (address[] memory) {\\n\\t\\treturn _getSwapFactoryStorage().pairs;\\n\\t}\\n\\n\\tfunction allPairs(uint256 index) external view returns (address) {\\n\\t\\treturn _getSwapFactoryStorage().pairs[index];\\n\\t}\\n\\n\\tfunction allPairsLength() external view returns (uint) {\\n\\t\\treturn _getSwapFactoryStorage().pairs.length;\\n\\t}\\n\\n\\tfunction _createPair(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\taddress pairsBeacon\\n\\t) internal returns (address pair) {\\n\\t\\tif (tokenA == tokenB) revert IdenticalAddress();\\n\\t\\t(address token0, address token1) = tokenA < tokenB\\n\\t\\t\\t? (tokenA, tokenB)\\n\\t\\t\\t: (tokenB, tokenA);\\n\\t\\tif (token0 == address(0)) revert ZeroAddress(); // This check is sufficient\\n\\n\\t\\tSwapFactoryStorage storage $ = _getSwapFactoryStorage();\\n\\n\\t\\tif ($.pairMap[token0][token1] != address(0)) revert PairExists(); // single check is sufficient\\n\\n\\t\\tpair = address(\\n\\t\\t\\tnew BeaconProxy{\\n\\t\\t\\t\\tsalt: keccak256(abi.encodePacked(token0, token1))\\n\\t\\t\\t}(\\n\\t\\t\\t\\tpairsBeacon,\\n\\t\\t\\t\\tabi.encodeWithSelector(Pair.initialize.selector, token0, token1)\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t\\t$.pairMap[token0][token1] = pair;\\n\\t\\t$.pairMap[token1][token0] = pair; // populate mapping in the reverse direction\\n\\t\\t$.pairs.push(pair);\\n\\t\\temit PairCreated(token0, token1, pair, $.pairs.length);\\n\\t}\\n}\\n\",\"keccak256\":\"0x0c151d02662e30ab52894e8e4d8f2d05ae48a33ef5c2171117ace17b974fd664\",\"license\":\"GPL-3.0-or-later\"},\"contracts/abstracts/UserModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nstruct ReferralInfo {\\n\\tuint256 id;\\n\\taddress referralAddress;\\n}\\n\\nstruct User {\\n\\tuint256 id;\\n\\taddress addr;\\n\\tuint256 referrerId;\\n\\tuint256[] referrals;\\n}\\n\\nlibrary UserModuleLib {\\n\\t/// @notice Gets the referrer and referrer ID of a user.\\n\\t/// @param userAddress The address of the user.\\n\\t/// @return referrerId The ID of the referrer, 0 if none.\\n\\t/// @return referrerAddress The address of the referrer, address(0) if none.\\n\\tfunction getReferrer(\\n\\t\\tUserModule.UserStorage storage $,\\n\\t\\taddress userAddress\\n\\t) public view returns (uint256 referrerId, address referrerAddress) {\\n\\t\\tUser storage user = $.users[userAddress];\\n\\t\\treferrerId = user.referrerId;\\n\\t\\treferrerAddress = $.userIdToAddress[referrerId];\\n\\t}\\n\\n\\t/// @notice Retrieves the referrals of a user.\\n\\t/// @param userAddress The address of the user.\\n\\t/// @return referrals An array of `ReferralInfo` structs representing the user's referrals.\\n\\tfunction getReferrals(\\n\\t\\tUserModule.UserStorage storage $,\\n\\t\\taddress userAddress\\n\\t) external view returns (ReferralInfo[] memory) {\\n\\t\\tuint256[] memory referralIds = $.users[userAddress].referrals;\\n\\t\\tReferralInfo[] memory referrals = new ReferralInfo[](\\n\\t\\t\\treferralIds.length\\n\\t\\t);\\n\\n\\t\\tfor (uint256 i = 0; i < referralIds.length; i++) {\\n\\t\\t\\tuint256 id = referralIds[i];\\n\\t\\t\\taddress refAddr = $.userIdToAddress[id];\\n\\t\\t\\treferrals[i] = ReferralInfo({ id: id, referralAddress: refAddr });\\n\\t\\t}\\n\\n\\t\\treturn referrals;\\n\\t}\\n\\n\\t/// @notice Internal function to create or get the user ID.\\n\\t/// @param userAddr The address of the user.\\n\\t/// @param referrerId The ID of the referrer.\\n\\tfunction createOrGetUserId(\\n\\t\\tUserModule.UserStorage storage $,\\n\\t\\taddress userAddr,\\n\\t\\tuint256 referrerId\\n\\t) external returns (uint256 userId, bool isNewUser, bool isRefAdded) {\\n\\t\\tUser storage user = $.users[userAddr];\\n\\n\\t\\t// If user already exists, return the existing ID\\n\\t\\tif (user.id != 0) {\\n\\t\\t\\treturn (user.id, false, false);\\n\\t\\t}\\n\\n\\t\\t// Increment user count and assign new user ID\\n\\t\\t$.userCount++;\\n\\t\\t$.users[userAddr] = User({\\n\\t\\t\\tid: $.userCount,\\n\\t\\t\\taddr: userAddr,\\n\\t\\t\\treferrerId: referrerId,\\n\\t\\t\\treferrals: new uint256[](0)\\n\\t\\t});\\n\\t\\t$.userIdToAddress[$.userCount] = userAddr;\\n\\n\\t\\t// Add user to referrer's referrals list, if applicable\\n\\t\\tif (\\n\\t\\t\\treferrerId != 0 &&\\n\\t\\t\\treferrerId != $.userCount &&\\n\\t\\t\\t$.userIdToAddress[referrerId] != address(0)\\n\\t\\t) {\\n\\t\\t\\t$.users[$.userIdToAddress[referrerId]].referrals.push($.userCount);\\n\\t\\t\\tisRefAdded = true;\\n\\t\\t}\\n\\n\\t\\tisNewUser = true;\\n\\t\\tuserId = $.userCount;\\n\\t}\\n}\\n\\nabstract contract UserModule {\\n\\t// Event declarations\\n\\tevent UserRegistered(\\n\\t\\tuint256 userId,\\n\\t\\taddress userAddress,\\n\\t\\tuint256 referrerId\\n\\t);\\n\\tevent ReferralAdded(uint256 referrerId, uint256 referralId);\\n\\n\\t/// @custom:storage-location erc7201:userModule.storage\\n\\tstruct UserStorage {\\n\\t\\tuint256 userCount;\\n\\t\\tmapping(address => User) users;\\n\\t\\tmapping(uint256 => address) userIdToAddress;\\n\\t}\\n\\t// keccak256(abi.encode(uint256(keccak256(\\\"userModule.storage\\\")) - 1)) & ~bytes32(uint256(0xff));\\n\\tbytes32 private constant USER_STORAGE_LOCATION =\\n\\t\\t0x0038ec5cf8f0d1747ebb72ff0e651cf1b10ea4f74874fe0bde352ae49428c500;\\n\\n\\t// Accessor for the namespaced storage slot\\n\\tfunction _getUserStorage() private pure returns (UserStorage storage $) {\\n\\t\\tassembly {\\n\\t\\t\\t$.slot := USER_STORAGE_LOCATION\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Internal function to create or get the user ID.\\n\\t/// @param userAddr The address of the user.\\n\\t/// @param referrerId The ID of the referrer.\\n\\t/// @return userId The ID of the user.\\n\\tfunction _createOrGetUserId(\\n\\t\\taddress userAddr,\\n\\t\\tuint256 referrerId\\n\\t) internal returns (uint256 userId) {\\n\\t\\tbool isNewUser;\\n\\t\\tbool isRefAdded;\\n\\t\\t(userId, isNewUser, isRefAdded) = UserModuleLib.createOrGetUserId(\\n\\t\\t\\t_getUserStorage(),\\n\\t\\t\\tuserAddr,\\n\\t\\t\\treferrerId\\n\\t\\t);\\n\\n\\t\\tif (isRefAdded) emit ReferralAdded(referrerId, userId);\\n\\n\\t\\tif (isNewUser) emit UserRegistered(userId, userAddr, referrerId);\\n\\t}\\n\\n\\t/// @notice Gets the user ID for a given address.\\n\\t/// @param userAddress The address of the user.\\n\\t/// @return userId The ID of the user.\\n\\tfunction getUserId(\\n\\t\\taddress userAddress\\n\\t) external view returns (uint256 userId) {\\n\\t\\treturn _getUserStorage().users[userAddress].id;\\n\\t}\\n\\n\\tfunction userIdToAddress(uint256 id) public view returns (address) {\\n\\t\\treturn _getUserStorage().userIdToAddress[id];\\n\\t}\\n\\n\\tfunction totalUsers() external view returns (uint256) {\\n\\t\\treturn _getUserStorage().userCount;\\n\\t}\\n\\n\\t// function getReferrer(\\n\\t// \\taddress userAddress\\n\\t// ) public view returns (uint256 referrerId, address referrerAddress) {\\n\\t// \\t(referrerId, referrerAddress) = UserModuleLib.getReferrer(\\n\\t// \\t\\t_getUserStorage(),\\n\\t// \\t\\tuserAddress\\n\\t// \\t);\\n\\t// }\\n\\n\\tfunction getReferrals(\\n\\t\\taddress userAddress\\n\\t) external view returns (ReferralInfo[] memory) {\\n\\t\\treturn UserModuleLib.getReferrals(_getUserStorage(), userAddress);\\n\\t}\\n}\\n\",\"keccak256\":\"0xcc5b6d7d93d530d247dda470b838b0affbdd27de475606bf89368042fa32e174\",\"license\":\"MIT\"},\"contracts/errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nabstract contract Errors {\\n\\terror InvalidPath(address[] path);\\n\\terror InSufficientOutputAmount(address[] path, uint256 amount);\\n}\\n\",\"keccak256\":\"0x99058f1526baf1c7f8063285799f5161a4f773d3c300b5cecedcec08ceb363ab\",\"license\":\"MIT\"},\"contracts/interfaces/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.28;\\n\\ninterface IPair {\\n\\tevent Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n\\tevent Burn(\\n\\t\\taddress indexed sender,\\n\\t\\tuint256 amount0,\\n\\t\\tuint256 amount1,\\n\\t\\taddress indexed to\\n\\t);\\n\\tevent Swap(\\n\\t\\taddress indexed sender,\\n\\t\\tuint256 amount0In,\\n\\t\\tuint256 amount1In,\\n\\t\\tuint256 amount0Out,\\n\\t\\tuint256 amount1Out,\\n\\t\\taddress indexed to\\n\\t);\\n\\tevent Sync(uint112 reserve0, uint112 reserve1);\\n\\n\\tfunction router() external view returns (address);\\n\\n\\tfunction token0() external view returns (address);\\n\\n\\tfunction token1() external view returns (address);\\n\\n\\tfunction getReserves()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n\\tfunction price0CumulativeLast() external view returns (uint256);\\n\\n\\tfunction price1CumulativeLast() external view returns (uint256);\\n\\n\\tfunction mint(address to) external returns (uint256 liquidity);\\n\\n\\tfunction burn(\\n\\t\\taddress to\\n\\t) external returns (uint256 amount0, uint256 amount1);\\n\\n\\tfunction swap(uint256 amount0Out, uint256 amount1Out, address to) external;\\n\\n\\tfunction sync() external;\\n\\n\\tfunction initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x8270ccf9b6faa6dde58d2e2342684c38d34f50cde79ac86f43ad6fa304fcd95d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport { TokenPayment } from \\\"../libraries/TokenPayments.sol\\\";\\n\\ninterface IRouter {\\n\\tfunction createPair(\\n\\t\\tTokenPayment calldata paymentA,\\n\\t\\tTokenPayment calldata paymentB\\n\\t) external payable returns (address pairAddress, uint256 gTokenNonce);\\n\\n\\tfunction addLiquidity(\\n\\t\\tTokenPayment memory paymentA,\\n\\t\\tTokenPayment memory paymentB,\\n\\t\\tuint amountAMin,\\n\\t\\tuint amountBMin,\\n\\t\\tuint deadline\\n\\t)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\treturns (uint amountA, uint amountB, uint liquidity, address pair);\\n\\n\\tfunction getWrappedNativeToken() external view returns (address);\\n\\n\\tfunction getPairsBeacon() external view returns (address);\\n}\\n\",\"keccak256\":\"0xeeb13a0649ab776696bdf22bf9b0d0b8f1725b06740bdebf52d8d8facd59b590\",\"license\":\"MIT\"},\"contracts/interfaces/ISwapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.28;\\n\\ninterface ISwapFactory {\\n\\terror IdenticalAddress();\\n\\terror ZeroAddress();\\n\\terror PairExists();\\n\\n\\tevent PairCreated(\\n\\t\\taddress indexed token0,\\n\\t\\taddress indexed token1,\\n\\t\\taddress pair,\\n\\t\\tuint256\\n\\t);\\n\\n\\tfunction feeTo() external view returns (address);\\n\\n\\tfunction feeToSetter() external view returns (address);\\n\\n\\tfunction getPair(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB\\n\\t) external view returns (address pair);\\n\\n\\tfunction allPairs(uint256) external view returns (address pair);\\n\\n\\tfunction allPairsLength() external view returns (uint);\\n\\n\\tfunction setFeeTo(address) external;\\n\\n\\tfunction setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0x8a3156561bd97ed873bebc1d8229d78fd1c6d62dcfb3d8bf64b24c274cd78948\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/AMMLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport { BeaconProxy } from \\\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\\\";\\n\\nimport { IPair } from \\\"../interfaces/IPair.sol\\\";\\nimport { Pair } from \\\"../Pair.sol\\\";\\n\\nimport \\\"../types.sol\\\";\\nimport \\\"../errors.sol\\\";\\n\\nlibrary AMMLibrary {\\n\\t// returns sorted token addresses, used to handle return values from pairs sorted in this order\\n\\tfunction sortTokens(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB\\n\\t) internal pure returns (address token0, address token1) {\\n\\t\\trequire(tokenA != tokenB, \\\"AMMLibrary: IDENTICAL_ADDRESSES\\\");\\n\\t\\t(token0, token1) = tokenA < tokenB\\n\\t\\t\\t? (tokenA, tokenB)\\n\\t\\t\\t: (tokenB, tokenA);\\n\\t\\trequire(token0 != address(0), \\\"AMMLibrary: ZERO_ADDRESS\\\");\\n\\t}\\n\\n\\t// fetches and sorts the reserves for a pair\\n\\tfunction getReserves(\\n\\t\\taddress router,\\n\\t\\taddress pairsBeacon,\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB\\n\\t) internal view returns (uint reserveA, uint reserveB) {\\n\\t\\t(address token0, ) = sortTokens(tokenA, tokenB);\\n\\t\\t(uint reserve0, uint reserve1, ) = IPair(\\n\\t\\t\\tpairFor(router, pairsBeacon, tokenA, tokenB)\\n\\t\\t).getReserves();\\n\\t\\t(reserveA, reserveB) = tokenA == token0\\n\\t\\t\\t? (reserve0, reserve1)\\n\\t\\t\\t: (reserve1, reserve0);\\n\\t}\\n\\n\\t// given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n\\tfunction quote(\\n\\t\\tuint amountA,\\n\\t\\tuint reserveA,\\n\\t\\tuint reserveB\\n\\t) external pure returns (uint amountB) {\\n\\t\\trequire(amountA > 0, \\\"AMMLibrary: INSUFFICIENT_AMOUNT\\\");\\n\\t\\trequire(\\n\\t\\t\\treserveA > 0 && reserveB > 0,\\n\\t\\t\\t\\\"AMMLibrary: INSUFFICIENT_LIQUIDITY\\\"\\n\\t\\t);\\n\\t\\tamountB = (amountA * reserveB) / reserveA;\\n\\t}\\n\\n\\t// given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n\\tfunction getAmountOut(\\n\\t\\tuint amountIn,\\n\\t\\tuint reserveIn,\\n\\t\\tuint reserveOut\\n\\t) internal pure returns (uint amountOut) {\\n\\t\\trequire(amountIn > 0, \\\"AMMLibrary: INSUFFICIENT_INPUT_AMOUNT\\\");\\n\\t\\trequire(\\n\\t\\t\\treserveIn > 0 && reserveOut > 0,\\n\\t\\t\\t\\\"AMMLibrary: INSUFFICIENT_LIQUIDITY\\\"\\n\\t\\t);\\n\\t\\tuint numerator = amountIn * reserveOut;\\n\\t\\tuint denominator = reserveIn + amountIn;\\n\\t\\tamountOut = numerator / denominator;\\n\\t}\\n\\n\\t// given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n\\tfunction getAmountIn(\\n\\t\\tuint amountOut,\\n\\t\\tuint reserveIn,\\n\\t\\tuint reserveOut\\n\\t) internal pure returns (uint amountIn) {\\n\\t\\trequire(amountOut > 0, \\\"AMMLibrary: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n\\t\\trequire(\\n\\t\\t\\treserveIn > 0 && reserveOut > 0,\\n\\t\\t\\t\\\"AMMLibrary: INSUFFICIENT_LIQUIDITY\\\"\\n\\t\\t);\\n\\t\\tuint numerator = reserveIn * amountOut;\\n\\t\\tuint denominator = reserveOut - amountOut;\\n\\t\\tamountIn = (numerator / denominator) + 1;\\n\\t}\\n\\n\\t// performs chained getAmountOut calculations on any number of pairs\\n\\tfunction getAmountsOut(\\n\\t\\taddress router,\\n\\t\\taddress pairsBeacon,\\n\\t\\tuint amountIn,\\n\\t\\taddress[] memory path\\n\\t) external view returns (uint[] memory amounts) {\\n\\t\\tif (path.length < 2) revert Errors.InvalidPath(path);\\n\\n\\t\\tamounts = new uint[](path.length);\\n\\t\\tamounts[0] = amountIn;\\n\\t\\tfor (uint i; i < path.length - 1; i++) {\\n\\t\\t\\t(uint reserveIn, uint reserveOut) = getReserves(\\n\\t\\t\\t\\trouter,\\n\\t\\t\\t\\tpairsBeacon,\\n\\t\\t\\t\\tpath[i],\\n\\t\\t\\t\\tpath[i + 1]\\n\\t\\t\\t);\\n\\t\\t\\tamounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n\\t\\t}\\n\\t}\\n\\n\\t// performs chained getAmountIn calculations on any number of pairs\\n\\tfunction getAmountsIn(\\n\\t\\taddress router,\\n\\t\\taddress pairsBeacon,\\n\\t\\tuint amountOut,\\n\\t\\taddress[] memory path\\n\\t) external view returns (uint[] memory amounts) {\\n\\t\\trequire(path.length >= 2, \\\"AMMLibrary: INVALID_PATH\\\");\\n\\t\\tamounts = new uint[](path.length);\\n\\t\\tamounts[amounts.length - 1] = amountOut;\\n\\t\\tfor (uint i = path.length - 1; i > 0; i--) {\\n\\t\\t\\t(uint reserveIn, uint reserveOut) = getReserves(\\n\\t\\t\\t\\trouter,\\n\\t\\t\\t\\tpairsBeacon,\\n\\t\\t\\t\\tpath[i - 1],\\n\\t\\t\\t\\tpath[i]\\n\\t\\t\\t);\\n\\t\\t\\tamounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction pairFor(\\n\\t\\taddress routerAddress,\\n\\t\\taddress pairsBeacon,\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB\\n\\t) internal pure returns (address pair) {\\n\\t\\t// Sort tokens to maintain consistent order\\n\\t\\t(address token0, address token1) = sortTokens(tokenA, tokenB);\\n\\n\\t\\t// Get bytecode hash for BeaconProxy with initialization parameters\\n\\t\\tbytes32 bytecodeHash = keccak256(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\ttype(BeaconProxy).creationCode,\\n\\t\\t\\t\\tabi.encode(\\n\\t\\t\\t\\t\\tpairsBeacon,\\n\\t\\t\\t\\t\\tabi.encodeWithSelector(\\n\\t\\t\\t\\t\\t\\tPair.initialize.selector,\\n\\t\\t\\t\\t\\t\\ttoken0,\\n\\t\\t\\t\\t\\t\\ttoken1\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t)\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t\\tbytes32 salt = keccak256(abi.encodePacked(token0, token1));\\n\\n\\t\\t// Compute the pair proxy address using CREATE2\\n\\t\\tpair = address(\\n\\t\\t\\tuint160(\\n\\t\\t\\t\\tuint256(\\n\\t\\t\\t\\t\\tkeccak256(\\n\\t\\t\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t\\t\\thex\\\"ff\\\",\\n\\t\\t\\t\\t\\t\\t\\trouterAddress,\\n\\t\\t\\t\\t\\t\\t\\tsalt,\\n\\t\\t\\t\\t\\t\\t\\tbytecodeHash\\n\\t\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t)\\n\\t\\t\\t)\\n\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0x39d2454a882fd7ccb54f515853b69c6ccd38008342f0200479215a0dea18c0a4\",\"license\":\"MIT\"},\"contracts/libraries/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.28;\\n\\nlibrary BitMath {\\n\\t// returns the 0 indexed position of the most significant bit of the input x\\n\\t// s.t. x >= 2**msb and x < 2**(msb+1)\\n\\tfunction mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n\\t\\trequire(x > 0, \\\"BitMath::mostSignificantBit: zero\\\");\\n\\n\\t\\tif (x >= 0x100000000000000000000000000000000) {\\n\\t\\t\\tx >>= 128;\\n\\t\\t\\tr += 128;\\n\\t\\t}\\n\\t\\tif (x >= 0x10000000000000000) {\\n\\t\\t\\tx >>= 64;\\n\\t\\t\\tr += 64;\\n\\t\\t}\\n\\t\\tif (x >= 0x100000000) {\\n\\t\\t\\tx >>= 32;\\n\\t\\t\\tr += 32;\\n\\t\\t}\\n\\t\\tif (x >= 0x10000) {\\n\\t\\t\\tx >>= 16;\\n\\t\\t\\tr += 16;\\n\\t\\t}\\n\\t\\tif (x >= 0x100) {\\n\\t\\t\\tx >>= 8;\\n\\t\\t\\tr += 8;\\n\\t\\t}\\n\\t\\tif (x >= 0x10) {\\n\\t\\t\\tx >>= 4;\\n\\t\\t\\tr += 4;\\n\\t\\t}\\n\\t\\tif (x >= 0x4) {\\n\\t\\t\\tx >>= 2;\\n\\t\\t\\tr += 2;\\n\\t\\t}\\n\\t\\tif (x >= 0x2) r += 1;\\n\\t}\\n\\n\\t// returns the 0 indexed position of the least significant bit of the input x\\n\\t// s.t. (x & 2**lsb) != 0 and (x & (2**(lsb) - 1)) == 0)\\n\\t// i.e. the bit at the index is set and the mask of all lower bits is 0\\n\\tfunction leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n\\t\\trequire(x > 0, \\\"BitMath::leastSignificantBit: zero\\\");\\n\\n\\t\\tr = 255;\\n\\t\\tif (x & type(uint128).max > 0) {\\n\\t\\t\\tr -= 128;\\n\\t\\t} else {\\n\\t\\t\\tx >>= 128;\\n\\t\\t}\\n\\t\\tif (x & type(uint64).max > 0) {\\n\\t\\t\\tr -= 64;\\n\\t\\t} else {\\n\\t\\t\\tx >>= 64;\\n\\t\\t}\\n\\t\\tif (x & type(uint32).max > 0) {\\n\\t\\t\\tr -= 32;\\n\\t\\t} else {\\n\\t\\t\\tx >>= 32;\\n\\t\\t}\\n\\t\\tif (x & type(uint16).max > 0) {\\n\\t\\t\\tr -= 16;\\n\\t\\t} else {\\n\\t\\t\\tx >>= 16;\\n\\t\\t}\\n\\t\\tif (x & type(uint8).max > 0) {\\n\\t\\t\\tr -= 8;\\n\\t\\t} else {\\n\\t\\t\\tx >>= 8;\\n\\t\\t}\\n\\t\\tif (x & 0xf > 0) {\\n\\t\\t\\tr -= 4;\\n\\t\\t} else {\\n\\t\\t\\tx >>= 4;\\n\\t\\t}\\n\\t\\tif (x & 0x3 > 0) {\\n\\t\\t\\tr -= 2;\\n\\t\\t} else {\\n\\t\\t\\tx >>= 2;\\n\\t\\t}\\n\\t\\tif (x & 0x1 > 0) r -= 1;\\n\\t}\\n}\\n\",\"keccak256\":\"0x8981f2dbaccf060fceff5e8e81f1d2b128e53b6fc40919b90fa468b0f65cb875\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/DeployGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport { Epochs } from \\\"./Epochs.sol\\\";\\nimport { Governance } from \\\"../Governance.sol\\\";\\nimport { TransparentUpgradeableProxy } from \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\n\\nlibrary DeployGovernance {\\n\\tfunction create(\\n\\t\\tEpochs.Storage memory epochs,\\n\\t\\taddress gainzToken,\\n\\t\\taddress wNativeToken,\\n\\t\\taddress proxyAdmin\\n\\t) external returns (address) {\\n\\t\\t// Deploy the TransparentUpgradeableProxy and initialize the Governance contract\\n\\t\\treturn\\n\\t\\t\\taddress(\\n\\t\\t\\t\\tnew TransparentUpgradeableProxy(\\n\\t\\t\\t\\t\\taddress(new Governance()),\\n\\t\\t\\t\\t\\tproxyAdmin,\\n\\t\\t\\t\\t\\tabi.encodeWithSelector(\\n\\t\\t\\t\\t\\t\\tGovernance.initialize.selector,\\n\\t\\t\\t\\t\\t\\tepochs,\\n\\t\\t\\t\\t\\t\\tgainzToken,\\n\\t\\t\\t\\t\\t\\twNativeToken,\\n\\t\\t\\t\\t\\t\\tproxyAdmin\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0xafc970f6304e8e06a14232d95f2a35526e1ba1650f419ef6b552a65b8e261e70\",\"license\":\"MIT\"},\"contracts/libraries/DeployPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport { PriceOracle } from \\\"../PriceOracle.sol\\\";\\n\\nlibrary DeployPriceOracle {\\n\\tfunction create() external returns (address oracle) {\\n\\t\\toracle = address(\\n\\t\\t\\tnew PriceOracle{\\n\\t\\t\\t\\tsalt: keccak256(abi.encodePacked(address(this)))\\n\\t\\t\\t}()\\n\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0x1cc49dffd20295eb16d5ae85bb0636d8a0207de0ccf6d2a84ce434dbb571da1d\",\"license\":\"MIT\"},\"contracts/libraries/DeployWNTV.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport { TransparentUpgradeableProxy } from \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\n\\nimport { WNTV } from \\\"../tokens/WNTV.sol\\\";\\n\\nlibrary DeployWNTV {\\n\\tfunction create(address proxyAdmin) external returns (address) {\\n\\t\\treturn\\n\\t\\t\\taddress(\\n\\t\\t\\t\\tnew TransparentUpgradeableProxy(\\n\\t\\t\\t\\t\\taddress(new WNTV()),\\n\\t\\t\\t\\t\\tproxyAdmin,\\n\\t\\t\\t\\t\\tabi.encodeWithSignature(\\\"initialize()\\\")\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0x6e5c7d795994ce64a0d64a6a92735705a6843c0297fe9064bf4ea8daa18bd0cb\",\"license\":\"MIT\"},\"contracts/libraries/Epochs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Epochs and Periods Management Library\\n/// @notice Provides functions to manage and calculate epochs and periods based on a genesis timestamp and epoch length.\\n/// @dev The epoch length is specified in seconds, and the period is calculated as 30 epochs.\\nlibrary Epochs {\\n\\t// Struct to store epoch management parameters\\n\\tstruct Storage {\\n\\t\\tuint256 genesis; // The genesis timestamp\\n\\t\\tuint256 epochLength; // Length of each epoch in seconds\\n\\t}\\n\\n\\t// Initialization Functions\\n\\n\\t/// @notice Initializes the storage with the current timestamp as the genesis and sets the epoch length.\\n\\t/// @param self The storage struct to initialize.\\n\\t/// @param _epochLength The length of an epoch in seconds.\\n\\t/// @dev This function should be called in the contract constructor to set the initial genesis timestamp and epoch length.\\n\\tfunction initialize(Storage storage self, uint256 _epochLength) internal {\\n\\t\\tself.genesis = block.timestamp;\\n\\t\\tself.epochLength = _epochLength;\\n\\n\\t\\trequire(self.epochLength > 0, \\\"Invalid Epoch length\\\");\\n\\t}\\n\\n\\t// View Functions\\n\\n\\t/// @notice Returns the current epoch based on the genesis timestamp and epoch length.\\n\\t/// @param self The storage struct containing the genesis timestamp and epoch length.\\n\\t/// @return The current epoch number.\\n\\t/// @dev The epoch is calculated by dividing the time elapsed since genesis by the epoch length in seconds.\\n\\tfunction currentEpoch(\\n\\t\\tStorage storage self\\n\\t) internal view returns (uint256) {\\n\\t\\treturn computeEpoch(self, block.timestamp);\\n\\t}\\n\\n\\tfunction computeEpoch(\\n\\t\\tStorage storage self,\\n\\t\\tuint256 timestamp\\n\\t) internal view returns (uint256) {\\n\\t\\trequire(self.epochLength > 0, \\\"Invalid Epoch length\\\");\\n\\n\\t\\treturn (timestamp - self.genesis) / self.epochLength;\\n\\t}\\n\\n\\tfunction epochEdgeTimestamps(\\n\\t\\tStorage memory self,\\n\\t\\tuint256 epoch\\n\\t) internal pure returns (uint256 epochStart, uint256 epochEnd) {\\n\\t\\tepochStart = self.genesis + (epoch * self.epochLength);\\n\\t\\tepochEnd = epochStart + self.epochLength - 1;\\n\\t}\\n}\\n\",\"keccak256\":\"0x834c16512ddf9dab574468909c624119507d569975587f40528a8de1dc48534c\",\"license\":\"MIT\"},\"contracts/libraries/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.28;\\n\\nimport \\\"./FullMath.sol\\\";\\nimport \\\"./Math.sol\\\";\\nimport \\\"./BitMath.sol\\\";\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\nlibrary FixedPoint {\\n\\t// range: [0, 2**112 - 1]\\n\\t// resolution: 1 / 2**112\\n\\tstruct uq112x112 {\\n\\t\\tuint224 _x;\\n\\t}\\n\\n\\t// range: [0, 2**144 - 1]\\n\\t// resolution: 1 / 2**112\\n\\tstruct uq144x112 {\\n\\t\\tuint256 _x;\\n\\t}\\n\\n\\tuint8 public constant RESOLUTION = 112;\\n\\tuint256 public constant Q112 = 0x10000000000000000000000000000; // 2**112\\n\\tuint256 private constant Q224 =\\n\\t\\t0x100000000000000000000000000000000000000000000000000000000; // 2**224\\n\\tuint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\\n\\n\\t// encode a uint112 as a UQ112x112\\n\\tfunction encode(uint112 x) internal pure returns (uq112x112 memory) {\\n\\t\\treturn uq112x112(uint224(x) << RESOLUTION);\\n\\t}\\n\\n\\t// encodes a uint144 as a UQ144x112\\n\\tfunction encode144(uint144 x) internal pure returns (uq144x112 memory) {\\n\\t\\treturn uq144x112(uint256(x) << RESOLUTION);\\n\\t}\\n\\n\\t// decode a UQ112x112 into a uint112 by truncating after the radix point\\n\\tfunction decode(uq112x112 memory self) internal pure returns (uint112) {\\n\\t\\treturn uint112(self._x >> RESOLUTION);\\n\\t}\\n\\n\\t// decode a UQ144x112 into a uint144 by truncating after the radix point\\n\\tfunction decode144(uq144x112 memory self) internal pure returns (uint144) {\\n\\t\\treturn uint144(self._x >> RESOLUTION);\\n\\t}\\n\\n\\t// multiply a UQ112x112 by a uint, returning a UQ144x112\\n\\t// reverts on overflow\\n\\tfunction mul(\\n\\t\\tuq112x112 memory self,\\n\\t\\tuint256 y\\n\\t) internal pure returns (uq144x112 memory) {\\n\\t\\tuint256 z = 0;\\n\\t\\trequire(\\n\\t\\t\\ty == 0 || (z = self._x * y) / y == self._x,\\n\\t\\t\\t\\\"FixedPoint::mul: overflow\\\"\\n\\t\\t);\\n\\t\\treturn uq144x112(z);\\n\\t}\\n\\n\\t// multiply a UQ112x112 by an int and decode, returning an int\\n\\t// reverts on overflow\\n\\tfunction muli(\\n\\t\\tuq112x112 memory self,\\n\\t\\tint256 y\\n\\t) internal pure returns (int256) {\\n\\t\\tuint256 z = FullMath.mulDiv(self._x, uint256(y < 0 ? -y : y), Q112);\\n\\t\\trequire(z < 2 ** 255, \\\"FixedPoint::muli: overflow\\\");\\n\\t\\treturn y < 0 ? -int256(z) : int256(z);\\n\\t}\\n\\n\\t// multiply a UQ112x112 by a UQ112x112, returning a UQ112x112\\n\\t// lossy\\n\\tfunction muluq(\\n\\t\\tuq112x112 memory self,\\n\\t\\tuq112x112 memory other\\n\\t) internal pure returns (uq112x112 memory) {\\n\\t\\tif (self._x == 0 || other._x == 0) {\\n\\t\\t\\treturn uq112x112(0);\\n\\t\\t}\\n\\t\\tuint112 upper_self = uint112(self._x >> RESOLUTION); // * 2^0\\n\\t\\tuint112 lower_self = uint112(self._x & LOWER_MASK); // * 2^-112\\n\\t\\tuint112 upper_other = uint112(other._x >> RESOLUTION); // * 2^0\\n\\t\\tuint112 lower_other = uint112(other._x & LOWER_MASK); // * 2^-112\\n\\n\\t\\t// partial products\\n\\t\\tuint224 upper = uint224(upper_self) * upper_other; // * 2^0\\n\\t\\tuint224 lower = uint224(lower_self) * lower_other; // * 2^-224\\n\\t\\tuint224 uppers_lowero = uint224(upper_self) * lower_other; // * 2^-112\\n\\t\\tuint224 uppero_lowers = uint224(upper_other) * lower_self; // * 2^-112\\n\\n\\t\\t// so the bit shift does not overflow\\n\\t\\trequire(\\n\\t\\t\\tupper <= type(uint112).max,\\n\\t\\t\\t\\\"FixedPoint::muluq: upper overflow\\\"\\n\\t\\t);\\n\\n\\t\\t// this cannot exceed 256 bits, all values are 224 bits\\n\\t\\tuint256 sum = uint256(upper << RESOLUTION) +\\n\\t\\t\\tuppers_lowero +\\n\\t\\t\\tuppero_lowers +\\n\\t\\t\\t(lower >> RESOLUTION);\\n\\n\\t\\t// so the cast does not overflow\\n\\t\\trequire(sum <= type(uint224).max, \\\"FixedPoint::muluq: sum overflow\\\");\\n\\n\\t\\treturn uq112x112(uint224(sum));\\n\\t}\\n\\n\\t// divide a UQ112x112 by a UQ112x112, returning a UQ112x112\\n\\tfunction divuq(\\n\\t\\tuq112x112 memory self,\\n\\t\\tuq112x112 memory other\\n\\t) internal pure returns (uq112x112 memory) {\\n\\t\\trequire(other._x > 0, \\\"FixedPoint::divuq: division by zero\\\");\\n\\t\\tif (self._x == other._x) {\\n\\t\\t\\treturn uq112x112(uint224(Q112));\\n\\t\\t}\\n\\t\\tif (self._x <= type(uint144).max) {\\n\\t\\t\\tuint256 value = (uint256(self._x) << RESOLUTION) / other._x;\\n\\t\\t\\trequire(value <= type(uint224).max, \\\"FixedPoint::divuq: overflow\\\");\\n\\t\\t\\treturn uq112x112(uint224(value));\\n\\t\\t}\\n\\n\\t\\tuint256 result = FullMath.mulDiv(Q112, self._x, other._x);\\n\\t\\trequire(result <= type(uint224).max, \\\"FixedPoint::divuq: overflow\\\");\\n\\t\\treturn uq112x112(uint224(result));\\n\\t}\\n\\n\\t// returns a UQ112x112 which represents the ratio of the numerator to the denominator\\n\\t// can be lossy\\n\\tfunction fraction(\\n\\t\\tuint256 numerator,\\n\\t\\tuint256 denominator\\n\\t) internal pure returns (uq112x112 memory) {\\n\\t\\trequire(denominator > 0, \\\"FixedPoint::fraction: division by zero\\\");\\n\\t\\tif (numerator == 0) return FixedPoint.uq112x112(0);\\n\\n\\t\\tif (numerator <= type(uint144).max) {\\n\\t\\t\\tuint256 result = (numerator << RESOLUTION) / denominator;\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tresult <= type(uint224).max,\\n\\t\\t\\t\\t\\\"FixedPoint::fraction: overflow\\\"\\n\\t\\t\\t);\\n\\t\\t\\treturn uq112x112(uint224(result));\\n\\t\\t} else {\\n\\t\\t\\tuint256 result = FullMath.mulDiv(numerator, Q112, denominator);\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tresult <= type(uint224).max,\\n\\t\\t\\t\\t\\\"FixedPoint::fraction: overflow\\\"\\n\\t\\t\\t);\\n\\t\\t\\treturn uq112x112(uint224(result));\\n\\t\\t}\\n\\t}\\n\\n\\t// take the reciprocal of a UQ112x112\\n\\t// reverts on overflow\\n\\t// lossy\\n\\tfunction reciprocal(\\n\\t\\tuq112x112 memory self\\n\\t) internal pure returns (uq112x112 memory) {\\n\\t\\trequire(self._x != 0, \\\"FixedPoint::reciprocal: reciprocal of zero\\\");\\n\\t\\trequire(self._x != 1, \\\"FixedPoint::reciprocal: overflow\\\");\\n\\t\\treturn uq112x112(uint224(Q224 / self._x));\\n\\t}\\n\\n\\t// square root of a UQ112x112\\n\\t// lossy between 0/1 and 40 bits\\n\\tfunction sqrt(\\n\\t\\tuq112x112 memory self\\n\\t) internal pure returns (uq112x112 memory) {\\n\\t\\tif (self._x <= type(uint144).max) {\\n\\t\\t\\treturn uq112x112(uint224(Math.sqrt(uint256(self._x) << 112)));\\n\\t\\t}\\n\\n\\t\\tuint8 safeShiftBits = 255 - BitMath.mostSignificantBit(self._x);\\n\\t\\tsafeShiftBits -= safeShiftBits % 2;\\n\\t\\treturn\\n\\t\\t\\tuq112x112(\\n\\t\\t\\t\\tuint224(\\n\\t\\t\\t\\t\\tMath.sqrt(uint256(self._x) << safeShiftBits) <<\\n\\t\\t\\t\\t\\t\\t((112 - safeShiftBits) / 2)\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0xffba7eb9b713ee0ac8d7682d233f3f809cf2ad483f331a17ce3a72eccb855233\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/FixedPoint128.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.28;\\n\\n/// @title FixedPoint128\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\nlibrary FixedPoint128 {\\n\\tuint256 internal constant Q128 = 0x100000000000000000000000000000000;\\n}\\n\",\"keccak256\":\"0xab1c11e19018c6c5e1adb618ee2f6d41017971593f100e701392e185166b12b5\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-4.0\\npragma solidity ^0.8.28;\\n\\n// taken from https://medium.com/coinmonks/math-in-solidity-part-3-percents-and-proportions-4db014e080b1\\n// license is CC-BY-4.0\\nlibrary FullMath {\\n\\tfunction fullMul(\\n\\t\\tuint256 x,\\n\\t\\tuint256 y\\n\\t) internal pure returns (uint256 l, uint256 h) {\\n\\t\\tuint256 mm = mulmod(x, y, type(uint256).max); // Use `type(uint256).max` instead of `uint256(-1)`\\n\\t\\tl = x * y;\\n\\t\\th = mm - l;\\n\\t\\tif (mm < l) h -= 1;\\n\\t}\\n\\n\\tfunction fullDiv(\\n\\t\\tuint256 l,\\n\\t\\tuint256 h,\\n\\t\\tuint256 d\\n\\t) private pure returns (uint256) {\\n\\t\\tuint256 pow2 = d & (~d + 1); // Extract the largest power of 2 divisor of d\\n\\t\\td /= pow2; // Divide d by pow2 to make it odd\\n\\t\\tl /= pow2; // Divide l by pow2\\n\\t\\tl += h * ((~pow2 + 1) / pow2 + 1); // Combine high and low parts\\n\\n\\t\\t// Newton-Raphson iteration to approximate the reciprocal of d modulo 2^256\\n\\t\\tuint256 r = 1;\\n\\t\\tr *= 2 - d * r; // 1st iteration\\n\\t\\tr *= 2 - d * r; // 2nd iteration\\n\\t\\tr *= 2 - d * r; // 3rd iteration\\n\\t\\tr *= 2 - d * r; // 4th iteration\\n\\t\\tr *= 2 - d * r; // 5th iteration\\n\\t\\tr *= 2 - d * r; // 6th iteration\\n\\t\\tr *= 2 - d * r; // 7th iteration\\n\\t\\tr *= 2 - d * r; // 8th iteration\\n\\n\\t\\treturn l * r;\\n\\t}\\n\\n\\tfunction mulDiv(\\n\\t\\tuint256 x,\\n\\t\\tuint256 y,\\n\\t\\tuint256 d\\n\\t) internal pure returns (uint256) {\\n\\t\\t(uint256 l, uint256 h) = fullMul(x, y);\\n\\n\\t\\tuint256 mm = mulmod(x, y, d);\\n\\t\\tif (mm > l) h -= 1;\\n\\t\\tl -= mm;\\n\\n\\t\\tif (h == 0) return l / d;\\n\\n\\t\\trequire(h < d, \\\"FullMath: FULLDIV_OVERFLOW\\\");\\n\\t\\treturn fullDiv(l, h, d);\\n\\t}\\n}\\n\",\"keccak256\":\"0xf6242d878d36df93b6aba7399f75caa0c305ba896985f1664d0722dcf8c3f07e\",\"license\":\"CC-BY-4.0\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n\\tfunction min(uint x, uint y) internal pure returns (uint z) {\\n\\t\\tz = x < y ? x : y;\\n\\t}\\n\\n\\t// babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n\\tfunction sqrt(uint y) internal pure returns (uint z) {\\n\\t\\tif (y > 3) {\\n\\t\\t\\tz = y;\\n\\t\\t\\tuint x = y / 2 + 1;\\n\\t\\t\\twhile (x < z) {\\n\\t\\t\\t\\tz = x;\\n\\t\\t\\t\\tx = (y / x + x) / 2;\\n\\t\\t\\t}\\n\\t\\t} else if (y != 0) {\\n\\t\\t\\tz = 1;\\n\\t\\t}\\n\\t}\\n\\n\\terror MathLinearInterpolationInvalidValues(\\n\\t\\tuint256 minIn,\\n\\t\\tuint256 currentIn,\\n\\t\\tuint256 maxIn\\n\\t);\\n\\n\\t/// @dev out = (minOut * (maxIn - currentIn) + maxOut * (currentIn - minIn)) / (maxIn - minIn)\\n\\t/// \\t https://en.wikipedia.org/wiki/LinearInterpolation\\n\\tfunction linearInterpolation(\\n\\t\\tuint256 minIn,\\n\\t\\tuint256 maxIn,\\n\\t\\tuint256 currentIn,\\n\\t\\tuint256 minOut,\\n\\t\\tuint256 maxOut\\n\\t) internal pure returns (uint256) {\\n\\t\\tif (currentIn < minIn || currentIn > maxIn) {\\n\\t\\t\\trevert MathLinearInterpolationInvalidValues(\\n\\t\\t\\t\\tminIn,\\n\\t\\t\\t\\tcurrentIn,\\n\\t\\t\\t\\tmaxIn\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tuint256 minOutWeighted = minOut * (maxIn - currentIn);\\n\\t\\tuint256 maxOutWeighted = maxOut * (currentIn - minIn);\\n\\t\\tuint256 inDiff = maxIn - minIn;\\n\\n\\t\\treturn (minOutWeighted + maxOutWeighted) / inDiff;\\n\\t}\\n}\\n\",\"keccak256\":\"0x0079a0c9124a1c1c6de9c78f790f798ddc8df61161b4747f86accdcb770e6ed3\",\"license\":\"MIT\"},\"contracts/libraries/OracleLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.28;\\n\\nimport { FixedPoint } from \\\"./FixedPoint.sol\\\";\\n\\nimport { Pair } from \\\"../Pair.sol\\\";\\nimport { PriceOracle } from \\\"../PriceOracle.sol\\\";\\n\\n// library with helper methods for oracles that are concerned with computing average prices\\nlibrary OracleLibrary {\\n\\tusing FixedPoint for *;\\n\\n\\t// helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\n\\tfunction currentBlockTimestamp() internal view returns (uint32) {\\n\\t\\treturn uint32(block.timestamp % 2 ** 32);\\n\\t}\\n\\n\\t// produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n\\tfunction currentCumulativePrices(\\n\\t\\taddress pair\\n\\t)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint price0Cumulative,\\n\\t\\t\\tuint price1Cumulative,\\n\\t\\t\\tuint32 blockTimestamp\\n\\t\\t)\\n\\t{\\n\\t\\tblockTimestamp = currentBlockTimestamp();\\n\\t\\tprice0Cumulative = Pair(pair).price0CumulativeLast();\\n\\t\\tprice1Cumulative = Pair(pair).price1CumulativeLast();\\n\\n\\t\\t// if time has elapsed since the last update on the pair, mock the accumulated price values\\n\\t\\t(uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = Pair(\\n\\t\\t\\tpair\\n\\t\\t).getReserves();\\n\\t\\tif (blockTimestampLast != blockTimestamp) {\\n\\t\\t\\t// subtraction overflow is desired\\n\\t\\t\\tuint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n\\t\\t\\t// addition overflow is desired\\n\\t\\t\\t// counterfactual\\n\\t\\t\\tprice0Cumulative +=\\n\\t\\t\\t\\tuint(FixedPoint.fraction(reserve1, reserve0)._x) *\\n\\t\\t\\t\\ttimeElapsed;\\n\\t\\t\\t// counterfactual\\n\\t\\t\\tprice1Cumulative +=\\n\\t\\t\\t\\tuint(FixedPoint.fraction(reserve0, reserve1)._x) *\\n\\t\\t\\t\\ttimeElapsed;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction oracleAddress(address router) external pure returns (address) {\\n\\t\\treturn\\n\\t\\t\\taddress(\\n\\t\\t\\t\\tuint160(\\n\\t\\t\\t\\t\\tuint256(\\n\\t\\t\\t\\t\\t\\tkeccak256(\\n\\t\\t\\t\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t\\t\\t\\thex\\\"ff\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\trouter,\\n\\t\\t\\t\\t\\t\\t\\t\\tkeccak256(abi.encodePacked(router)),\\n\\t\\t\\t\\t\\t\\t\\t\\tkeccak256(type(PriceOracle).creationCode)\\n\\t\\t\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0x4c552a5abe402b7a004aea61632c7b763232e6dc43ddcfc665da5e47ad169d3b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/TokenPayments.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { SFT } from \\\"../abstracts/SFT.sol\\\";\\nimport { WNTV } from \\\"../tokens/WNTV.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nstruct TokenPayment {\\n\\taddress token;\\n\\tuint256 amount;\\n\\tuint256 nonce;\\n}\\n\\nlibrary TokenPayments {\\n\\tusing Address for address;\\n\\n\\tfunction receiveTokenFor(\\n\\t\\tTokenPayment memory payment,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\taddress wNTV\\n\\t) internal {\\n\\t\\tif (payment.token == address(0)) {\\n\\t\\t\\t// Wrap native tokens for `to`\\n\\t\\t\\tWNTV(payable(wNTV)).receiveFor{ value: payment.amount }(to);\\n\\t\\t} else if (payment.nonce == 0) {\\n\\t\\t\\t// ERC20 payment\\n\\t\\t\\tIERC20(payment.token).transferFrom(from, to, payment.amount);\\n\\t\\t} else {\\n\\t\\t\\t// SFT payment\\n\\t\\t\\tSFT(payment.token).safeTransferFrom(\\n\\t\\t\\t\\tfrom,\\n\\t\\t\\t\\tto,\\n\\t\\t\\t\\tpayment.nonce,\\n\\t\\t\\t\\tpayment.amount,\\n\\t\\t\\t\\t\\\"\\\"\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction sendFungibleToken(\\n\\t\\taddress token,\\n\\t\\tuint256 amount,\\n\\t\\taddress to\\n\\t) internal {\\n\\t\\tsendToken(TokenPayment({ token: token, amount: amount, nonce: 0 }), to);\\n\\t}\\n\\n\\tfunction sendToken(TokenPayment memory payment, address to) internal {\\n\\t\\tif (payment.nonce == 0) {\\n\\t\\t\\tuint256 beforeNativeBal = address(this).balance;\\n\\n\\t\\t\\t// Try to withdraw ETH assuming payment.token is WNTV\\n\\t\\t\\t(bool shouldMoveEthBalance, ) = payment.token.call(\\n\\t\\t\\t\\tabi.encodeWithSignature(\\\"withdraw(uint256)\\\", payment.amount)\\n\\t\\t\\t);\\n\\n\\t\\t\\t// Checks to ensure balance movements\\n\\t\\t\\tif (shouldMoveEthBalance) {\\n\\t\\t\\t\\trequire(\\n\\t\\t\\t\\t\\t(beforeNativeBal + payment.amount) == address(this).balance,\\n\\t\\t\\t\\t\\t\\\"Failed to withdraw WNTV\\\"\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\tpayable(to).transfer(payment.amount);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tIERC20(payment.token).transfer(to, payment.amount);\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\t// SFT payment\\n\\t\\t\\tSFT(payment.token).safeTransferFrom(\\n\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\tto,\\n\\t\\t\\t\\tpayment.nonce,\\n\\t\\t\\t\\tpayment.amount,\\n\\t\\t\\t\\t\\\"\\\"\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction approve(TokenPayment memory payment, address to) internal {\\n\\t\\tif (payment.nonce == 0) {\\n\\t\\t\\t// ERC20 approval\\n\\t\\t\\tIERC20(payment.token).approve(to, payment.amount);\\n\\t\\t} else {\\n\\t\\t\\t// SFT approval\\n\\t\\t\\tSFT(payment.token).setApprovalForAll(to, true);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x274de6ee69e3b0e980c7fe91e6b8736902f74a3d5d34ecd1d227c380b6e35804\",\"license\":\"MIT\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.28;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n\\tfunction safeApprove(address token, address to, uint256 value) internal {\\n\\t\\t// bytes4(keccak256(bytes('approve(address,uint256)')));\\n\\t\\t(bool success, bytes memory data) = token.call(\\n\\t\\t\\tabi.encodeWithSelector(0x095ea7b3, to, value)\\n\\t\\t);\\n\\t\\t_handleReturnData(success, data);\\n\\t}\\n\\n\\tfunction safeTransfer(address token, address to, uint256 value) internal {\\n\\t\\t// bytes4(keccak256(bytes('transfer(address,uint256)')));\\n\\t\\t(bool success, bytes memory data) = token.call(\\n\\t\\t\\tabi.encodeWithSelector(0xa9059cbb, to, value)\\n\\t\\t);\\n\\t\\t_handleReturnData(success, data);\\n\\t}\\n\\n\\tfunction safeTransferFrom(\\n\\t\\taddress token,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 value\\n\\t) internal {\\n\\t\\t// bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n\\t\\t(bool success, bytes memory data) = token.call(\\n\\t\\t\\tabi.encodeWithSelector(0x23b872dd, from, to, value)\\n\\t\\t);\\n\\t\\t_handleReturnData(success, data);\\n\\t}\\n\\n\\tfunction safeTransferETH(address to, uint256 value) internal {\\n\\t\\t(bool success, bytes memory returnData) = to.call{ value: value }(\\n\\t\\t\\tnew bytes(0)\\n\\t\\t);\\n\\t\\t_handleReturnData(success, returnData);\\n\\t}\\n\\n\\tfunction _handleReturnData(\\n\\t\\tbool success,\\n\\t\\tbytes memory returnData\\n\\t) internal pure {\\n\\t\\t// Inline assembly to handle errors\\n\\t\\tassembly {\\n\\t\\t\\t// If the call failed, check if there is return data (error message)\\n\\t\\t\\tif iszero(success) {\\n\\t\\t\\t\\tif gt(mload(returnData), 0) {\\n\\t\\t\\t\\t\\t// Revert with the actual error message from the failed call\\n\\t\\t\\t\\t\\trevert(add(returnData, 32), mload(returnData))\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// If there is no return data, revert with a generic message\\n\\t\\t\\t\\trevert(0, 0)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xebfefb6291e6a770886aaf621548d9985972c5f0712d108f5185b251fd746598\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/UQ112x112.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    uint224 constant Q112 = 2**112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\\n\",\"keccak256\":\"0xa7d6bf73218a08d49ca98eb7a2c1bb3a2b4f19bd0d0795c06bec3e5eca9313a5\",\"license\":\"MIT\"},\"contracts/tokens/GToken/GToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport { GTokenLib } from \\\"./GTokenLib.sol\\\";\\nimport { SFT } from \\\"../../abstracts/SFT.sol\\\";\\nimport { Epochs } from \\\"../../libraries/Epochs.sol\\\";\\n\\nimport \\\"../../types.sol\\\";\\n\\nstruct GTokenBalance {\\n\\tuint256 nonce;\\n\\tuint256 amount;\\n\\tuint256 votePower;\\n\\tGTokenLib.Attributes attributes;\\n}\\n\\n/// @title GToken Contract\\n/// @notice This contract handles the minting of governance tokens (GToken) used in the Gainz platform.\\n/// @dev The contract extends a semi-fungible token (SFT) and uses GToken attributes for staking.\\ncontract GToken is SFT {\\n\\tusing GTokenLib for GTokenLib.Attributes;\\n\\tusing Epochs for Epochs.Storage;\\n\\n\\t/// @custom:storage-location erc7201:gainz.GToken.storage\\n\\tstruct GTokenStorage {\\n\\t\\tuint256 totalStakeWeight;\\n\\t\\tmapping(address => uint256) pairSupply;\\n\\t\\tuint256 totalSupply;\\n\\t\\tEpochs.Storage epochs;\\n\\t}\\n\\n\\t// keccak256(abi.encode(uint256(keccak256(\\\"gainz.GToken.storage\\\")) - 1)) & ~bytes32(uint256(0xff));\\n\\tbytes32 private constant GTOKEN_STORAGE_LOCATION =\\n\\t\\t0xb8e7eb3bf49f83cb3ff588efef6ab82dab4dc692401ee0d26d4dc4d075b6c500;\\n\\n\\tfunction _getGTokenStorage()\\n\\t\\tprivate\\n\\t\\tpure\\n\\t\\treturns (GTokenStorage storage $)\\n\\t{\\n\\t\\tassembly {\\n\\t\\t\\t$.slot := GTOKEN_STORAGE_LOCATION\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Constructor to initialize the GToken contract.\\n\\t/// @dev Sets the name and symbol of the SFT for GToken.\\n\\tfunction initialize(\\n\\t\\tEpochs.Storage memory epochs,\\n\\t\\taddress initialOwner\\n\\t) public initializer {\\n\\t\\t__SFT_init(\\\"GainzSwap Governance Token\\\", \\\"GToken\\\", initialOwner);\\n\\t\\t_getGTokenStorage().epochs = epochs;\\n\\t}\\n\\n\\t/// @notice Mints a new GToken for the given address.\\n\\t/// @dev The function encodes GToken attributes and mints the token with those attributes.\\n\\t/// @param to The address that will receive the minted GToken.\\n\\t/// @param rewardPerShare The reward per share at the time of minting.\\n\\t/// @param epochsLocked The number of epochs for which the LP tokens are locked.\\n\\t/// @param currentEpoch The current epoch when the GToken is minted.\\n\\t/// @param lpDetails An array of LiquidityInfo structs representing the LP token payments.\\n\\t/// @return uint256 The token ID of the newly minted GToken.\\n\\tfunction mintGToken(\\n\\t\\taddress to,\\n\\t\\tuint256 rewardPerShare,\\n\\t\\tuint256 epochsLocked,\\n\\t\\tuint256 currentEpoch,\\n\\t\\tLiquidityInfo memory lpDetails\\n\\t) external canUpdate returns (uint256) {\\n\\t\\tif (_getGTokenStorage().epochs.currentEpoch() <= 180) {\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tepochsLocked >= 180,\\n\\t\\t\\t\\t\\\"GToken: INVALID_GENESIS_PERIOD_EPOCHS_LOCK\\\"\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\t// Create GToken attributes and compute the stake weight\\n\\t\\tGTokenLib.Attributes memory attributes = GTokenLib\\n\\t\\t\\t.Attributes({\\n\\t\\t\\t\\trewardPerShare: rewardPerShare,\\n\\t\\t\\t\\tepochStaked: currentEpoch,\\n\\t\\t\\t\\tlastClaimEpoch: currentEpoch,\\n\\t\\t\\t\\tepochsLocked: epochsLocked,\\n\\t\\t\\t\\tstakeWeight: 0,\\n\\t\\t\\t\\tlpDetails: lpDetails\\n\\t\\t\\t})\\n\\t\\t\\t.computeStakeWeight();\\n\\n\\t\\t// Mint the GToken with the specified attributes and return the token ID\\n\\t\\treturn _mint(to, attributes.supply(), abi.encode(attributes));\\n\\t}\\n\\n\\tfunction update(\\n\\t\\taddress user,\\n\\t\\tuint256 nonce,\\n\\t\\tGTokenLib.Attributes memory attr\\n\\t) external canUpdate returns (uint256) {\\n\\t\\tattr = attr.computeStakeWeight();\\n\\t\\treturn super.update(user, nonce, attr.supply(), abi.encode(attr));\\n\\t}\\n\\n\\t/**\\n\\t * @notice Retrieves the governance token balance and attributes for a specific user at a given nonce.\\n\\t * @dev This function checks if the user has a Semi-Fungible Token (SFT) at the provided nonce.\\n\\t * If the user does not have a balance at the specified nonce, the function will revert with an error.\\n\\t * The function then returns the governance balance for the user at that nonce.\\n\\t *\\n\\t * @param user The address of the user whose balance is being queried.\\n\\t * @param nonce The nonce for the specific GToken to retrieve.\\n\\t *\\n\\t * @return GTokenBalance A struct containing the nonce, amount, and attributes of the GToken.\\n\\t *\\n\\t * Requirements:\\n\\t * - The user must have a GToken balance at the specified nonce.\\n\\t */\\n\\tfunction getBalanceAt(\\n\\t\\taddress user,\\n\\t\\tuint256 nonce\\n\\t) public view returns (GTokenBalance memory) {\\n\\t\\trequire(\\n\\t\\t\\thasSFT(user, nonce),\\n\\t\\t\\t\\\"No GToken balance found at nonce for user\\\"\\n\\t\\t);\\n\\n\\t\\treturn\\n\\t\\t\\t_packageGTokenBalance(\\n\\t\\t\\t\\tnonce,\\n\\t\\t\\t\\tbalanceOf(user, nonce),\\n\\t\\t\\t\\t_getRawTokenAttributes(nonce)\\n\\t\\t\\t);\\n\\t}\\n\\n\\tfunction _packageGTokenBalance(\\n\\t\\tuint256 nonce,\\n\\t\\tuint256 amount,\\n\\t\\tbytes memory attr\\n\\t) private view returns (GTokenBalance memory) {\\n\\t\\tGTokenLib.Attributes memory attrUnpacked = abi.decode(\\n\\t\\t\\tattr,\\n\\t\\t\\t(GTokenLib.Attributes)\\n\\t\\t);\\n\\t\\tuint256 epochsLeft = attrUnpacked.epochsLeft(\\n\\t\\t\\tattrUnpacked.epochsElapsed(\\n\\t\\t\\t\\t_getGTokenStorage().epochs.currentEpoch()\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\tuint256 votePower = attrUnpacked.votePower(epochsLeft);\\n\\n\\t\\treturn\\n\\t\\t\\tGTokenBalance({\\n\\t\\t\\t\\tnonce: nonce,\\n\\t\\t\\t\\tamount: amount,\\n\\t\\t\\t\\tattributes: attrUnpacked,\\n\\t\\t\\t\\tvotePower: votePower\\n\\t\\t\\t});\\n\\t}\\n\\n\\t/**\\n\\t * @notice Retrieves the entire GToken balance and attributes for a specific user.\\n\\t * @dev This function queries all Semi-Fungible Tokens (SFTs) held by the user and decodes\\n\\t * the attributes for each GToken.\\n\\t *\\n\\t * @param user The address of the user whose balances are being queried.\\n\\t *\\n\\t * @return GTokenBalance[] An array of structs, each containing the nonce, amount, and attributes\\n\\t * of the user's GToken.\\n\\t */\\n\\tfunction getGTokenBalance(\\n\\t\\taddress user\\n\\t) public view returns (GTokenBalance[] memory) {\\n\\t\\tSftBalance[] memory _sftBals = _sftBalance(user);\\n\\t\\tGTokenBalance[] memory balance = new GTokenBalance[](\\n\\t\\t\\t_sftBals.length\\n\\t\\t);\\n\\n\\t\\tfor (uint256 i = 0; i < _sftBals.length; i++) {\\n\\t\\t\\tSftBalance memory _sftBal = _sftBals[i];\\n\\n\\t\\t\\tbalance[i] = _packageGTokenBalance(\\n\\t\\t\\t\\t_sftBal.nonce,\\n\\t\\t\\t\\t_sftBal.amount,\\n\\t\\t\\t\\t_sftBal.attributes\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\treturn balance;\\n\\t}\\n\\n\\tfunction totalStakeWeight() public view returns (uint256) {\\n\\t\\treturn _getGTokenStorage().totalStakeWeight;\\n\\t}\\n\\n\\tfunction totalSupply() public view returns (uint256) {\\n\\t\\treturn _getGTokenStorage().totalSupply;\\n\\t}\\n\\n\\tfunction decimal() external pure returns (uint8) {\\n\\t\\treturn 18;\\n\\t}\\n\\n\\t/// @dev the attributes beign updated must have be updated by calling the `computeStakeWeight` method on them\\n\\tfunction _update(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256[] memory ids,\\n\\t\\tuint256[] memory values\\n\\t) internal override {\\n\\t\\tsuper._update(from, to, ids, values);\\n\\n\\t\\tfor (uint256 i; i < ids.length; i++) {\\n\\t\\t\\tuint256 id = ids[i];\\n\\t\\t\\tGTokenLib.Attributes memory attr = abi.decode(\\n\\t\\t\\t\\t_getRawTokenAttributes(id),\\n\\t\\t\\t\\t(GTokenLib.Attributes)\\n\\t\\t\\t);\\n\\n\\t\\t\\tuint256 supply = attr.supply();\\n\\t\\t\\tGTokenStorage storage $ = _getGTokenStorage();\\n\\t\\t\\tif (from == address(0) && to != address(0)) {\\n\\t\\t\\t\\t// We are minting, so increase staking weight\\n\\t\\t\\t\\t$.totalStakeWeight += attr.stakeWeight;\\n\\t\\t\\t\\t$.totalSupply += supply;\\n\\t\\t\\t\\t$.pairSupply[attr.lpDetails.pair] += supply;\\n\\t\\t\\t} else if (from != address(0) && to == address(0)) {\\n\\t\\t\\t\\t// We are burning, so decrease staking weight\\n\\t\\t\\t\\t$.totalStakeWeight -= attr.stakeWeight;\\n\\t\\t\\t\\t$.totalSupply -= supply;\\n\\t\\t\\t\\t$.pairSupply[attr.lpDetails.pair] -= supply;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Splits a GToken into portions and distributes it to the specified addresses.\\n\\t/// @dev If an address is the zero address, the allotted portion is burned.\\n\\t/// This function can be called by the contract owner or the token's owner.\\n\\t/// @param nonce The nonce of the GToken to split.\\n\\t/// @param addresses An array of addresses to receive the split portions.\\n\\t/// @param liquidityPortions An array of liquidityPortions representing the amounts to be split.\\n\\t/// @return splitNonces An array of nonces for the newly minted split tokens.\\n\\tfunction split(\\n\\t\\tuint256 nonce,\\n\\t\\taddress[] calldata addresses,\\n\\t\\tuint256[] calldata liquidityPortions\\n\\t) external returns (uint256[] memory splitNonces) {\\n\\t\\trequire(\\n\\t\\t\\taddresses.length > 0 &&\\n\\t\\t\\t\\taddresses.length == liquidityPortions.length,\\n\\t\\t\\t\\\"Invalid Addresses and portions\\\"\\n\\t\\t);\\n\\n\\t\\taddress user = addresses[0];\\n\\n\\t\\trequire(\\n\\t\\t\\thasSFT(user, nonce) || isOperator(msg.sender),\\n\\t\\t\\t\\\"Caller not authorized\\\"\\n\\t\\t);\\n\\n\\t\\tGTokenLib.Attributes memory attributes = getBalanceAt(user, nonce)\\n\\t\\t\\t.attributes;\\n\\t\\tGTokenLib.Attributes[] memory splitAttributes = attributes.split(\\n\\t\\t\\tliquidityPortions\\n\\t\\t);\\n\\n\\t\\tsplitNonces = new uint256[](splitAttributes.length);\\n\\t\\tfor (uint256 i = 0; i < splitAttributes.length; i++) {\\n\\t\\t\\tsplitNonces[i] = _mint(\\n\\t\\t\\t\\taddresses[i],\\n\\t\\t\\t\\tsplitAttributes[i].supply(),\\n\\t\\t\\t\\tabi.encode(splitAttributes[i])\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\t// Burn the original token after splitting\\n\\t\\t_burn(user, nonce, attributes.supply());\\n\\t}\\n\\n\\tfunction pairSupply(address pair) public view returns (uint256) {\\n\\t\\treturn _getGTokenStorage().pairSupply[pair];\\n\\t}\\n}\\n\",\"keccak256\":\"0xda3d10ed3cff953b979c02e80f54f76b9c48777eafb5e708b84aaba5be552ea1\",\"license\":\"MIT\"},\"contracts/tokens/GToken/GTokenLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport { TokenPayment } from \\\"../../libraries/TokenPayments.sol\\\";\\nimport { Math } from \\\"../../libraries/Math.sol\\\";\\n\\nimport \\\"../../types.sol\\\";\\n\\n/// @title GToken Library\\n/// @notice This library provides functions for managing GToken attributes, including staking, claiming rewards, and calculating stake weights and rewards.\\nlibrary GTokenLib {\\n\\t/// @dev Attributes struct holds the data related to a participant's stake in the GToken contract.\\n\\tstruct Attributes {\\n\\t\\tuint256 rewardPerShare;\\n\\t\\tuint256 epochStaked;\\n\\t\\tuint256 epochsLocked;\\n\\t\\tuint256 lastClaimEpoch;\\n\\t\\tuint256 stakeWeight;\\n\\t\\tLiquidityInfo lpDetails;\\n\\t}\\n\\n\\t// Constants for lock periods and percentage loss calculations\\n\\tuint256 public constant MIN_EPOCHS_LOCK = 0;\\n\\tuint256 public constant MAX_EPOCHS_LOCK = 1080;\\n\\tuint256 public constant MIN_EPOCHS_LOCK_PERCENT_LOSS = 55e4; // 55% in basis points\\n\\tuint256 public constant MAX_EPOCHS_LOCK_PERCENT_LOSS = 15e4; // 15% in basis points\\n\\tuint256 public constant MAX_PERCENT_LOSS = 100e4; // 100% in basis points\\n\\n\\t/// @notice Computes the stake weight based on the amount of LP tokens and the epochs locked.\\n\\t/// @param self The Attributes struct of the participant.\\n\\t/// @return The updated Attributes struct with the computed stake weight.\\n\\tfunction computeStakeWeight(\\n\\t\\tAttributes memory self\\n\\t) internal pure returns (Attributes memory) {\\n\\t\\tuint256 epochsLocked = self.epochsLocked;\\n\\t\\trequire(\\n\\t\\t\\tMIN_EPOCHS_LOCK <= epochsLocked && epochsLocked <= MAX_EPOCHS_LOCK,\\n\\t\\t\\t\\\"GToken: Invalid epochsLocked\\\"\\n\\t\\t);\\n\\n\\t\\tif (self.lpDetails.liquidity == 0) {\\n\\t\\t\\tself.lpDetails.liqValue = 0;\\n\\t\\t}\\n\\n\\t\\t// Calculate stake weight based on supply and epochs locked\\n\\t\\tself.stakeWeight = self.lpDetails.liqValue * epochsLocked;\\n\\n\\t\\treturn self;\\n\\t}\\n\\n\\t/// @notice Splits an `Attributes` struct into multiple portions based on the specified liquidity portions.\\n\\t/// @param self The original `Attributes` struct to split.\\n\\t/// @param liquidityPortions An array of percentages (as portions of 1e18) to divide the liquidity into.\\n\\t/// @return splitAttributes An array of new `Attributes` structs with the allocated portions.\\n\\tfunction split(\\n\\t\\tAttributes memory self,\\n\\t\\tuint256[] memory liquidityPortions\\n\\t) internal pure returns (Attributes[] memory splitAttributes) {\\n\\t\\t// Initialize the array to store split `Attributes` structs\\n\\t\\tsplitAttributes = new Attributes[](liquidityPortions.length);\\n\\n\\t\\tuint256 portionSum;\\n\\t\\tuint256 liqValueSum;\\n\\n\\t\\t// Loop through each portion and split attributes\\n\\t\\tfor (uint256 i = 0; i < liquidityPortions.length; i++) {\\n\\t\\t\\tuint256 splitLiquidity = liquidityPortions[i];\\n\\t\\t\\tuint256 liqValue = (splitLiquidity * self.lpDetails.liqValue) /\\n\\t\\t\\t\\tself.lpDetails.liquidity;\\n\\n\\t\\t\\tsplitAttributes[i] = computeStakeWeight(\\n\\t\\t\\t\\tAttributes({\\n\\t\\t\\t\\t\\trewardPerShare: self.rewardPerShare,\\n\\t\\t\\t\\t\\tepochStaked: self.epochStaked,\\n\\t\\t\\t\\t\\tepochsLocked: self.epochsLocked,\\n\\t\\t\\t\\t\\tlastClaimEpoch: self.lastClaimEpoch,\\n\\t\\t\\t\\t\\tstakeWeight: 0,\\n\\t\\t\\t\\t\\tlpDetails: LiquidityInfo({\\n\\t\\t\\t\\t\\t\\ttoken0: self.lpDetails.token0,\\n\\t\\t\\t\\t\\t\\ttoken1: self.lpDetails.token1,\\n\\t\\t\\t\\t\\t\\tpair: self.lpDetails.pair,\\n\\t\\t\\t\\t\\t\\tliquidity: splitLiquidity,\\n\\t\\t\\t\\t\\t\\tliqValue: liqValue\\n\\t\\t\\t\\t\\t})\\n\\t\\t\\t\\t})\\n\\t\\t\\t);\\n\\n\\t\\t\\tportionSum += splitAttributes[i].lpDetails.liquidity;\\n\\t\\t\\tliqValueSum += splitAttributes[i].lpDetails.liqValue;\\n\\t\\t}\\n\\n\\t\\t// last portion gets un used liqValue, if any\\n\\t\\tsplitAttributes[splitAttributes.length - 1].lpDetails.liqValue +=\\n\\t\\t\\tself.lpDetails.liqValue -\\n\\t\\t\\tliqValueSum;\\n\\n\\t\\treturn splitAttributes;\\n\\t}\\n\\n\\tfunction supply(Attributes memory self) internal pure returns (uint256) {\\n\\t\\treturn self.lpDetails.liqValue;\\n\\t}\\n\\n\\t/// @notice Calculates the number of epochs that have elapsed since staking.\\n\\t/// @param self The Attributes struct of the participant.\\n\\t/// @param currentEpoch The current epoch.\\n\\t/// @return The number of epochs elapsed since staking.\\n\\tfunction epochsElapsed(\\n\\t\\tAttributes memory self,\\n\\t\\tuint256 currentEpoch\\n\\t) internal pure returns (uint256) {\\n\\t\\tif (currentEpoch <= self.epochStaked) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\treturn currentEpoch - self.epochStaked;\\n\\t}\\n\\n\\t/// @notice Calculates the number of epochs remaining until the stake is unlocked.\\n\\t/// @param self The Attributes struct of the participant.\\n\\t/// @param currentEpoch The current epoch.\\n\\t/// @return The number of epochs remaining until unlock.\\n\\tfunction epochsLeft(\\n\\t\\tAttributes memory self,\\n\\t\\tuint256 currentEpoch\\n\\t) internal pure returns (uint256) {\\n\\t\\tuint256 elapsed = epochsElapsed(self, currentEpoch);\\n\\t\\tif (elapsed >= self.epochsLocked) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\treturn self.epochsLocked - elapsed;\\n\\t}\\n\\n\\t/// @notice Calculates the user's vote power based on the locked GToken amount and remaining epochs.\\n\\t/// @param self The Attributes struct of the participant.\\n\\t/// @return The calculated vote power as a uint256.\\n\\t/// @dev see https://wiki.sovryn.com/en/governance/about-sovryn-governance\\n\\tfunction votePower(\\n\\t\\tAttributes memory self,\\n\\t\\tuint256 currentEpoch\\n\\t) internal pure returns (uint256) {\\n\\t\\tuint256 xPow = (MAX_EPOCHS_LOCK - epochsLeft(self, currentEpoch)) ** 2;\\n\\t\\tuint256 mPow = MAX_EPOCHS_LOCK ** 2;\\n\\n\\t\\tuint256 voteWeight = ((9 * xPow) / mPow) + 1;\\n\\n\\t\\treturn self.lpDetails.liqValue * voteWeight;\\n\\t}\\n\\n\\t/// @notice Calculates the number of epochs since the last reward claim.\\n\\t/// @param self The Attributes struct of the participant.\\n\\t/// @return The number of epochs since the last claim.\\n\\tfunction epochsUnclaimed(\\n\\t\\tAttributes memory self\\n\\t) internal pure returns (uint256) {\\n\\t\\treturn self.epochsLocked - self.lastClaimEpoch;\\n\\t}\\n\\n\\t/// @notice Calculates the amount of value to keep based on epochs elapsed and locked.\\n\\t/// @param self The Attributes struct of the participant.\\n\\t/// @param value The total value amount.\\n\\t/// @param currentEpoch The current epoch.\\n\\t/// @return The amount of value to keep after applying penalties.\\n\\tfunction valueToKeep(\\n\\t\\tAttributes memory self,\\n\\t\\tuint256 value,\\n\\t\\tuint256 currentEpoch\\n\\t) internal pure returns (uint256) {\\n\\t\\t// prevent division by 0\\n\\t\\trequire(self.epochsLocked > 0, \\\"GTokenLib: INVALID_EPOCHS_LOCKED\\\");\\n\\n\\t\\t// Calculate percentage loss based on epochs locked\\n\\t\\tuint256 epochsLockedPercentLoss = Math.linearInterpolation(\\n\\t\\t\\tMIN_EPOCHS_LOCK,\\n\\t\\t\\tMAX_EPOCHS_LOCK,\\n\\t\\t\\tself.epochsLocked,\\n\\t\\t\\tMIN_EPOCHS_LOCK_PERCENT_LOSS,\\n\\t\\t\\tMAX_EPOCHS_LOCK_PERCENT_LOSS\\n\\t\\t);\\n\\n\\t\\t// Calculate the percentage of the value to keep after penalties\\n\\t\\tuint256 percentLost = epochsElapsedPercentLoss(\\n\\t\\t\\tepochsElapsed(self, currentEpoch),\\n\\t\\t\\tepochsLockedPercentLoss,\\n\\t\\t\\tself.epochsLocked\\n\\t\\t);\\n\\n\\t\\tuint256 percentToKeep = MAX_PERCENT_LOSS - percentLost;\\n\\t\\treturn (value * percentToKeep) / MAX_PERCENT_LOSS;\\n\\t}\\n\\n\\tfunction hasNativeToken(\\n\\t\\tAttributes memory self,\\n\\t\\taddress wNativeToken\\n\\t) internal pure returns (bool itHas) {\\n\\t\\titHas =\\n\\t\\t\\tself.lpDetails.token0 == wNativeToken ||\\n\\t\\t\\tself.lpDetails.token1 == wNativeToken;\\n\\t}\\n\\n\\t/// @notice Calculates the percentage loss of the reward based on elapsed epochs.\\n\\t/// @param elapsed The number of epochs elapsed since staking.\\n\\t/// @param lockedPercentLoss The percentage loss based on epochs locked.\\n\\t/// @param locked The total epochs locked.\\n\\t/// @return The percentage loss based on epochs elapsed.\\n\\tfunction epochsElapsedPercentLoss(\\n\\t\\tuint256 elapsed,\\n\\t\\tuint256 lockedPercentLoss,\\n\\t\\tuint256 locked\\n\\t) private pure returns (uint256) {\\n\\t\\tuint256 remainingTime = elapsed > locked ? 0 : locked - elapsed;\\n\\n\\t\\treturn\\n\\t\\t\\tMath.linearInterpolation(\\n\\t\\t\\t\\t0,\\n\\t\\t\\t\\tlocked,\\n\\t\\t\\t\\tremainingTime,\\n\\t\\t\\t\\t0,\\n\\t\\t\\t\\tlockedPercentLoss\\n\\t\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0x271f6479d8dc0f8565ac765542f55cf3b2cae0a08fea3e1c1d74b396211c4960\",\"license\":\"MIT\"},\"contracts/tokens/WNTV.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport { ERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\n\\n/// @title WNTV (Wrapped Native Token)\\n/// @notice This contract wraps native tokens into ERC20-compliant WNTV tokens.\\ncontract WNTV is ERC20Upgradeable {\\n\\t/// @notice Constructor initializes the ERC20Upgradeable token with name and symbol.\\n\\tfunction initialize() public initializer {\\n\\t\\t__ERC20_init(\\\"Wrapped Native Token\\\", \\\"WNTV\\\");\\n\\t}\\n\\n\\t/// @notice Unwraps WNTV tokens back into native tokens.\\n\\t/// @param amount The amount of WNTV tokens to unwrap.\\n\\t/// @dev This function burns the specified amount of WNTV tokens and sends the equivalent amount of native tokens to the user.\\n\\tfunction withdraw(uint256 amount) public {\\n\\t\\trequire(balanceOf(msg.sender) >= amount, \\\"WNTV: Insufficient balance\\\");\\n\\t\\t_burn(msg.sender, amount);\\n\\t\\tpayable(msg.sender).transfer(amount);\\n\\t}\\n\\n\\t/// @notice Allows an approved spender to use WNTV tokens on behalf of the sender.\\n\\t/// @param owner The address of the token owner.\\n\\t/// @param spender The address of the spender allowed to use the tokens.\\n\\t/// @dev This function mints WNTV tokens to the owner and approves the spender to use the minted tokens.\\n\\tfunction receiveForSpender(address owner, address spender) public payable {\\n\\t\\t_mint(owner, msg.value);\\n\\t\\t_approve(owner, spender, msg.value);\\n\\t}\\n\\n\\t/// @notice Wraps native tokens into WNTV tokens for `owner`. The amount of WNTV minted equals the amount of native tokens sent.\\n\\t/// @param owner The address of the token owner.\\n\\t/// @dev This function mints WNTV tokens equivalent to the amount of native tokens sent by the user.\\n\\tfunction receiveFor(address owner) public payable {\\n\\t\\t_mint(owner, msg.value);\\n\\t}\\n}\\n\",\"keccak256\":\"0xbcdddc66b365f2b1ac16b235aee6e83e0d547524c9f021845115bea67f2ca34a\",\"license\":\"MIT\"},\"contracts/types.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.28;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nstruct LiquidityInfo {\\n\\taddress token0;\\n\\taddress token1;\\n\\tuint256 liquidity;\\n\\tuint256 liqValue;\\n\\taddress pair;\\n}\\n\\nfunction createLiquidityInfoArray(\\n\\tLiquidityInfo memory element\\n) pure returns (LiquidityInfo[] memory array) {\\n\\tarray = new LiquidityInfo[](1);\\n\\tarray[0] = element;\\n}\\n\",\"keccak256\":\"0x93f14acc5b0b277f8466d9420b4914bfcdd6d9fa3bcd5ca390c433fd90975ef8\",\"license\":\"GPL-3.0-or-later\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n}\\n\",\"keccak256\":\"0xf2560b5386574153057104d19a9e68a32ee912cf23c0c8df1fe9a0607f42d543\",\"license\":\"MIT\"}},\"version\":1}"
}